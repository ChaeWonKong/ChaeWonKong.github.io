I"}<p>오늘은 React 프로젝트에서 TypeScript를 이용해 Redux-Saga를 사용해 보겠습니다.</p>

<p>우선, 본 포스트는 Redux를 사용해 봤다는 전제 하에 Redux-Saga를 설명합니다. 또, <code class="language-plaintext highlighter-rouge">generator</code> 를 들어보고 대충은 알고 있다는 전제 하에 설명을 진행합니다.</p>

<p>간단히 설명하며, 실제로 Redux-Saga의 작동을 몸소 체험할 수 있도록 Redux가 구현된 프로젝트를 공유하니 클론(clone)해서 튜토리얼처럼 따라해 보세요.</p>

<h2 id="redux-saga-개요">Redux-Saga 개요</h2>

<p>Redux-Saga는 Redux에서 비동기 처리를 효과적으로 결합할 수 있는 방법을 제시합니다.</p>

<p>Redux에서 사이드이펙트를 효과적으로 관리할 수 있도록 돕는 미들웨어입니다.</p>

<p>Redux-Thunk의 대안이라고도 하죠.</p>

<p>ES6의 <code class="language-plaintext highlighter-rouge">generator</code> 를 활용하여 비동기 처리를 효과적으로 진행하면서도 actionCreator 함수를 순수함수로 남겨두어 Redux-Thunk와 같은 사이드이펙트간의 엉킴 등이 없습니다.</p>

<h2 id="프로젝트-시작하기">프로젝트 시작하기</h2>

<p>우리는 두개의 버튼으로 스코어를 더하고 빼는 어플리케이션을 가지고 Redux-Saga를 연습할 계획입니다.</p>

<p>Redux-Saga를 적용해 버튼이 클릭된 후 2초 뒤에 스코어(score)가 업데이트 되도록 비동기 처리를 진행해 보겠습니다.</p>

<p><a href="https://github.com/ChaeWonKong/redux-saga-example">예제 프로젝트 Github 주소</a></p>

<p>먼저 Redux가 구현되어 있는 예제 프로젝트를 클론합니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/ChaeWonKong/redux-saga-example.git
</code></pre></div></div>

<p>클론한 디렉토리로 이동해 패키지 설치를 진행합니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>redux-saga-example
yarn
</code></pre></div></div>

<p>다음으로 예제 프로젝트가 정상적으로 작동하는지 확인해 봅시다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn start
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">http://localhost:3000</code> 으로 이동해 보면 다음과 같은 화면을 만나실 겁니다.</p>

<p><img src="https://github.com/ChaeWonKong/image-resource/blob/master/score.png?raw=true" width="60%" /></p>

<p>버튼을 눌러 보셨나요?</p>

<p>스코어 숫자가 바로 바로 변화하는 것을 확인하실 수 있습니다.</p>

<h2 id="프로젝트-소개">프로젝트 소개</h2>

<p>지금 설치한 프로젝트는 TypeScript와 Hook을 이용해 Redux를 사용하고 있습니다.</p>

<p>어떤 식으로 구현되어 있는지 간단히 살펴 보도록 할게요.</p>

<p>먼저 <code class="language-plaintext highlighter-rouge">constants.ts</code> 파일을 볼게요. 이 파일은 Redux에서 사용할 액션 타입들을 상수로 선언하고 사용하기 위해 생성한 파일입니다.</p>

<p><strong>src/actions/constants.ts</strong></p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">SCORE_UP</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">SCORE_UP</span><span class="dl">"</span><span class="p">;</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">SCORE_UP_ASYNC</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">SCORE_UP_ASYNC</span><span class="dl">"</span><span class="p">;</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">SCORE_DOWN</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">SCORE_DOWN</span><span class="dl">"</span><span class="p">;</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">SCORE_DOWN_ASYNC</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">SCORE_DOWN_ASYNC</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<p>매번 액션을 타이핑해 사용하다 보면 오탈자로 인해 버그가 발생할 수 있어 이렇게 상수로 선언하고 가져다 쓰는 경우가 많죠.</p>

<p><strong>src/actions/actions.ts</strong></p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">SCORE_DOWN</span><span class="p">,</span> <span class="nx">SCORE_UP</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./constants</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">scoreUp</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="nx">SCORE_UP</span><span class="p">,</span> <span class="na">score</span><span class="p">:</span> <span class="mi">1</span> <span class="p">};</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">scoreDown</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="nx">SCORE_DOWN</span><span class="p">,</span> <span class="na">score</span><span class="p">:</span> <span class="mi">1</span> <span class="p">};</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kd">type</span> <span class="nx">ScoreAction</span> <span class="o">=</span>
  <span class="o">|</span> <span class="nx">ReturnType</span><span class="o">&lt;</span><span class="k">typeof</span> <span class="nx">scoreUp</span><span class="o">&gt;</span>
  <span class="o">|</span> <span class="nx">ReturnType</span><span class="o">&lt;</span><span class="k">typeof</span> <span class="nx">scoreDown</span><span class="o">&gt;</span><span class="p">;</span>
</code></pre></div></div>

<p>다음으로 액션함수를 살펴보겠습니다.</p>

<p>먼저 <code class="language-plaintext highlighter-rouge">SCORE_UP</code>, <code class="language-plaintext highlighter-rouge">SCORE_DOWN</code> 을 가져옵니다.</p>

<p>액션함수는 <code class="language-plaintext highlighter-rouge">scoreUp()</code> 과 <code class="language-plaintext highlighter-rouge">scoreDown()</code> 두개를 생성해 사용하겠습니다.</p>

<p>여기서 중요한 것은 각 액션함수의 반환 타입(return type)을 타입으로 export 해주는 것입니다. TypeScript를 사용하기 때문에 reducer에서 필요해 집니다.</p>

<p><strong>src/stores/reducers.ts</strong></p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">SCORE_DOWN</span><span class="p">,</span> <span class="nx">SCORE_UP</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../actions/constants</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ScoreAction</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../actions/actions</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">initialState</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">score</span><span class="p">:</span> <span class="mi">0</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">reducer</span> <span class="o">=</span> <span class="p">(</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">initialState</span><span class="p">,</span> <span class="nx">action</span><span class="p">:</span> <span class="nx">ScoreAction</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">newState</span> <span class="o">=</span> <span class="p">{</span> <span class="p">...</span><span class="nx">state</span> <span class="p">};</span>

  <span class="k">switch</span> <span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="na">SCORE_UP</span><span class="p">:</span>
      <span class="nx">newState</span><span class="p">.</span><span class="nx">score</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
      <span class="k">return</span> <span class="nx">newState</span><span class="p">;</span>
    <span class="k">case</span> <span class="na">SCORE_DOWN</span><span class="p">:</span>
      <span class="nx">newState</span><span class="p">.</span><span class="nx">score</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
      <span class="k">return</span> <span class="nx">newState</span><span class="p">;</span>
    <span class="nl">default</span><span class="p">:</span>
      <span class="k">return</span> <span class="nx">state</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kd">type</span> <span class="nx">RootState</span> <span class="o">=</span> <span class="nx">ReturnType</span><span class="o">&lt;</span><span class="k">typeof</span> <span class="nx">reducer</span><span class="o">&gt;</span><span class="p">;</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">reducer</span><span class="p">;</span>
</code></pre></div></div>

<p>다음으로 reducer를 볼게요.</p>

<p>액션 타입과 액션함수들을 가져오구요.</p>

<p>reducer함수는 액션의 타입에 따라 state의 <code class="language-plaintext highlighter-rouge">score</code> 를 +1 하거나 -1 하게 됩니다.</p>

<p>앞서 <strong>actions/actions.ts</strong> 에서 export했던 <code class="language-plaintext highlighter-rouge">ScoreAction</code> 을 action의 type으로 넘겨준 것을 확인해 주세요.</p>

<p><code class="language-plaintext highlighter-rouge">const reducer = (state = initialState, action: ScoreAction) =&gt;{}</code></p>

<p>여기서도 중요한 것이 바로 <code class="language-plaintext highlighter-rouge">export type RootState = ReturnType&lt;typeof reducer&gt;;</code> 이 부분입니다.</p>

<p>TypeScript이기 때문에 추후 Redux-Saga에서 reducer의 반환 타입(return type)이 필요해 집니다.</p>

<p><strong>src/index.tsx</strong></p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="nx">createStore</span><span class="p">(</span><span class="nx">rootReducer</span><span class="p">);</span>

<span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
  <span class="p">&lt;</span><span class="nc">Provider</span> <span class="na">store</span><span class="p">=</span><span class="si">{</span><span class="nx">store</span><span class="si">}</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nc">App</span> <span class="p">/&gt;</span>
  <span class="p">&lt;/</span><span class="nc">Provider</span><span class="p">&gt;,</span>
  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">root</span><span class="dl">"</span><span class="p">)</span>
<span class="p">);</span>
</code></pre></div></div>

<p>스토어를 생성하고 <strong>index.tsx</strong>에서 연결하는 것은 보통의 Redux와 같습니다.</p>

<p>다음으로 커스텀 훅입니다.</p>

<p><strong>src/hooks/useScore.ts</strong></p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useSelector</span><span class="p">,</span> <span class="nx">useDispatch</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-redux</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">RootState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../stores/reducers</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">scoreDown</span><span class="p">,</span> <span class="nx">scoreUp</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../actions/actions</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useCallback</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">useScore</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">score</span> <span class="o">=</span> <span class="nx">useSelector</span><span class="p">((</span><span class="nx">state</span><span class="p">:</span> <span class="nx">RootState</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">state</span><span class="p">.</span><span class="nx">score</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">dispatch</span> <span class="o">=</span> <span class="nx">useDispatch</span><span class="p">();</span>

  <span class="kd">const</span> <span class="nx">onScoreUp</span> <span class="o">=</span> <span class="nx">useCallback</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">dispatch</span><span class="p">(</span><span class="nx">scoreUp</span><span class="p">()),</span> <span class="p">[</span><span class="nx">dispatch</span><span class="p">]);</span>
  <span class="kd">const</span> <span class="nx">onScoreDown</span> <span class="o">=</span> <span class="nx">useCallback</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">dispatch</span><span class="p">(</span><span class="nx">scoreDown</span><span class="p">()),</span> <span class="p">[</span><span class="nx">dispatch</span><span class="p">]);</span>

  <span class="k">return</span> <span class="p">{</span> <span class="nx">score</span><span class="p">,</span> <span class="nx">onScoreUp</span><span class="p">,</span> <span class="nx">onScoreDown</span> <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">useScore()</code> 라는 커스텀 훅을 생성하여 상태 관리와 프레젠테이션 컴포넌트를 최대한 분리했습니다.</p>

<p>사용방법은 <a href="https://velog.io/@velopert/create-typescript-react-component">Velopert, “리액트 컴포넌트 타입스크립트로 작성하기”</a> 을 참고했습니다.</p>

<h2 id="redux-saga-도입하기">Redux-Saga 도입하기</h2>

<p>이제 Redux-Saga를 도입해 보겠습니다.</p>

<p>먼저 src 디렉토리에 <strong>sagas</strong> 라는 디렉토리를 생성합니다.</p>

<p>그리고 다음 코드를 작성하겠습니다.</p>

<p><strong>src/sagas/saga.ts</strong></p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">takeEvery</span><span class="p">,</span> <span class="nx">put</span><span class="p">,</span> <span class="nx">delay</span><span class="p">,</span> <span class="nx">all</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">redux-saga/effects</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span>
  <span class="nx">SCORE_DOWN_ASYNC</span><span class="p">,</span>
  <span class="nx">SCORE_UP_ASYNC</span><span class="p">,</span>
  <span class="nx">SCORE_DOWN</span><span class="p">,</span>
  <span class="nx">SCORE_UP</span>
<span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../actions/constants</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span><span class="o">*</span> <span class="nx">scoreUpAsync</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">yield</span> <span class="nx">delay</span><span class="p">(</span><span class="mi">2000</span><span class="p">);</span>
  <span class="k">yield</span> <span class="nx">put</span><span class="p">({</span> <span class="na">type</span><span class="p">:</span> <span class="nx">SCORE_UP_ASYNC</span><span class="p">,</span> <span class="na">score</span><span class="p">:</span> <span class="mi">1</span> <span class="p">});</span>
<span class="p">}</span>

<span class="kd">function</span><span class="o">*</span> <span class="nx">scoreDownAsync</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">yield</span> <span class="nx">delay</span><span class="p">(</span><span class="mi">2000</span><span class="p">);</span>
  <span class="k">yield</span> <span class="nx">put</span><span class="p">({</span> <span class="na">type</span><span class="p">:</span> <span class="nx">SCORE_DOWN_ASYNC</span><span class="p">,</span> <span class="na">score</span><span class="p">:</span> <span class="mi">1</span> <span class="p">});</span>
<span class="p">}</span>

<span class="kd">function</span><span class="o">*</span> <span class="nx">watchScoreUp</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">yield</span> <span class="nx">takeEvery</span><span class="p">(</span><span class="nx">SCORE_UP</span><span class="p">,</span> <span class="nx">scoreUpAsync</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span><span class="o">*</span> <span class="nx">watchScoreDown</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">yield</span> <span class="nx">takeEvery</span><span class="p">(</span><span class="nx">SCORE_DOWN</span><span class="p">,</span> <span class="nx">scoreDownAsync</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span><span class="o">*</span> <span class="nx">rootSaga</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">yield</span> <span class="nx">all</span><span class="p">([</span><span class="nx">watchScoreUp</span><span class="p">(),</span> <span class="nx">watchScoreDown</span><span class="p">()]);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>먼저 <code class="language-plaintext highlighter-rouge">scoreUpAsync()</code>와 <code class="language-plaintext highlighter-rouge">scoreDownAsync()</code> 함수는 제너레이터(generator)를 이용해 2초의 딜레이 후 액션 객체를 반환합니다.</p>

<p>다음으로 <code class="language-plaintext highlighter-rouge">watchScoreUp()</code>과 <code class="language-plaintext highlighter-rouge">watchScoreDown()</code>은 기존에 우리가 작성한 <strong>src/actions/actions.ts</strong>의 액션함수(action creators)가 실행되어 액션 객체가 리턴되면 reducer로 전달되기 직전에 해당 액션객체를 가로채 <code class="language-plaintext highlighter-rouge">scoreUpAsync()</code>와 <code class="language-plaintext highlighter-rouge">scoreDownAsync()</code> 함수를 실행합니다.</p>

<p><code class="language-plaintext highlighter-rouge">takeEvery()</code>는 모든 async 요청을 반영하도록 하는 헬퍼 함수입니다. 우리의 경우 버튼을 연속해 클릭하면 클릭한 횟수만큼 반영이 되는 셈입니다.</p>

<p>반면에 <code class="language-plaintext highlighter-rouge">takeLatest()</code>를 사용하면 버튼을 연속해 클릭해도 가장 마지막 클릭만 반영됩니다.</p>

<p>마지막으로 <code class="language-plaintext highlighter-rouge">rootSaga()</code>는 <code class="language-plaintext highlighter-rouge">watchScoreUp()</code>과 <code class="language-plaintext highlighter-rouge">watchScoreDown()</code> 을 묶어서 실행해 줍니다.</p>

<p>제너레이터 함수를 이용함으로써, 우리는 async 작업이 끝날 때 우리에게 필요한 액션 객체를 reducer로 전달할 수 있게 되었습니다.</p>

<p>만약 이것이 Ajax 요청이었다면 response를 받은 후 데이터가 액션 객체의 payload 형태로 reducer로 전달되어 상태값이 변경되었을 것입니다.</p>

<p>다음으로 reducer를 조금 수정해 보겠습니다.</p>

<p><strong>src/stores/reducers.ts</strong></p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">SCORE_DOWN_ASYNC</span><span class="p">,</span> <span class="nx">SCORE_UP_ASYNC</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../actions/constants</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ScoreAction</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../actions/actions</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">initialState</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">score</span><span class="p">:</span> <span class="mi">0</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">reducer</span> <span class="o">=</span> <span class="p">(</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">initialState</span><span class="p">,</span> <span class="nx">action</span><span class="p">:</span> <span class="nx">ScoreAction</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">newState</span> <span class="o">=</span> <span class="p">{</span> <span class="p">...</span><span class="nx">state</span> <span class="p">};</span>

  <span class="k">switch</span> <span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="na">SCORE_UP_ASYNC</span><span class="p">:</span>
      <span class="nx">newState</span><span class="p">.</span><span class="nx">score</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
      <span class="k">return</span> <span class="nx">newState</span><span class="p">;</span>
    <span class="k">case</span> <span class="na">SCORE_DOWN_ASYNC</span><span class="p">:</span>
      <span class="nx">newState</span><span class="p">.</span><span class="nx">score</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
      <span class="k">return</span> <span class="nx">newState</span><span class="p">;</span>
    <span class="nl">default</span><span class="p">:</span>
      <span class="k">return</span> <span class="nx">state</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kd">type</span> <span class="nx">RootState</span> <span class="o">=</span> <span class="nx">ReturnType</span><span class="o">&lt;</span><span class="k">typeof</span> <span class="nx">reducer</span><span class="o">&gt;</span><span class="p">;</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">reducer</span><span class="p">;</span>
</code></pre></div></div>

<p>여기서 주목할 부분은 액션객체의 type 부분입니다. <code class="language-plaintext highlighter-rouge">SCORE_UP</code>은 <code class="language-plaintext highlighter-rouge">SCORE_UP_ASYNC</code>로, <code class="language-plaintext highlighter-rouge">SCORE_DOWN</code>은<code class="language-plaintext highlighter-rouge">SCORE_DOWN_ASYNC</code>로 변경해 주었습니다.</p>

<p>앞서 만든 <strong>src/sagas/saga.ts</strong> 파일에서 우리는 async 작업이 완료되면 새 액션객체를 리턴했습니다.</p>

<p>당연히 reducer는 가로채어져서 변경된 새 액션객체를 기준으로 동작해야 하므로 액션의 타입을 위처럼 변경해줬습니다.</p>

<p>마지막으로 우리가 생성한 스토어(store)에 Redux-Saga를 추가해주겠습니다.</p>

<p><strong>src/index.tsx</strong></p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ReactDOM</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-dom</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">./index.css</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">App</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./App</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">serviceWorker</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./serviceWorker</span><span class="dl">"</span><span class="p">;</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">createStore</span><span class="p">,</span> <span class="nx">applyMiddleware</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">redux</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Provider</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-redux</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">rootReducer</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./stores/reducers</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">rootSaga</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./sagas/saga</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">createSagaMiddleware</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">redux-saga</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">sagaMiddleware</span> <span class="o">=</span> <span class="nx">createSagaMiddleware</span><span class="p">();</span>

<span class="kd">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="nx">createStore</span><span class="p">(</span><span class="nx">rootReducer</span><span class="p">,</span> <span class="nx">applyMiddleware</span><span class="p">(</span><span class="nx">sagaMiddleware</span><span class="p">));</span>

<span class="nx">sagaMiddleware</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="nx">rootSaga</span><span class="p">);</span>

<span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
  <span class="p">&lt;</span><span class="nc">Provider</span> <span class="na">store</span><span class="p">=</span><span class="si">{</span><span class="nx">store</span><span class="si">}</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nc">App</span> <span class="p">/&gt;</span>
  <span class="p">&lt;/</span><span class="nc">Provider</span><span class="p">&gt;,</span>
  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">root</span><span class="dl">"</span><span class="p">)</span>
<span class="p">);</span>

<span class="nx">serviceWorker</span><span class="p">.</span><span class="nx">unregister</span><span class="p">();</span>
</code></pre></div></div>

<p>우선 <strong>src/sagas/saga</strong>에서 <code class="language-plaintext highlighter-rouge">rootSaga</code>를, <strong>redux-saga</strong>에서 <code class="language-plaintext highlighter-rouge">createSagaMiddleware</code>를, <strong>redux</strong>에서 <code class="language-plaintext highlighter-rouge">applyMiddleware</code> 를 import합니다.</p>

<p>그리고 <code class="language-plaintext highlighter-rouge">sagaMiddleware</code>를 생성하고 <code class="language-plaintext highlighter-rouge">store</code>에 추가해 줍니다.</p>

<p>마지막으로 <code class="language-plaintext highlighter-rouge">rootSaga</code>를 매개변수로 <code class="language-plaintext highlighter-rouge">sagaMiddleware.run(rootSaga);</code>를 호출해 줍니다.</p>

<p><strong>드디어, 완성입니다.</strong></p>

<p>이제 프로젝트를 로컬에서 실행해 보면, 버튼을 눌러도 score가 바로 올라가지 않고 2초간 기다렸다 변화하는 것을 확인할 수 있습니다!</p>

<h2 id="마치며">마치며</h2>

<p>만약 기존의 순수한 Redux 코드와 Redux-Saga를 적용한 코드를 비교해 보고 싶다면 브랜치를 변경해 확인하세요.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">start</code> 브랜치는 초기 프로젝트처럼 Redux 만으로 코드가 구성되어 있습니다.</li>
  <li><code class="language-plaintext highlighter-rouge">complete</code> 브랜치에서는 Redux-Saga가 적용되어 완성된 코드를 확인할 수 있습니다.</li>
</ul>

<p><strong>초기 상태로 돌려서 코드 보기</strong></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout start
</code></pre></div></div>

<p><strong>Redux-Saga 적용된 완성본 코드 보기</strong></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout <span class="nb">complete</span>
</code></pre></div></div>

<h2 id="참고자료">참고자료</h2>

<ul>
  <li><a href="https://velog.io/@velopert/create-typescript-react-component">Velopert, “리액트 컴포넌트 타입스크립트로 작성하기”</a></li>
  <li><a href="https://redux-saga.js.org/">Redux-Saga 공식 사이트</a></li>
  <li><a href="https://github.com/reactkr/learn-react-in-korean/blob/master/translated/deal-with-async-process-by-redux-saga.md">redux-saga로 비동기처리와 분투하다.</a></li>
</ul>
:ET