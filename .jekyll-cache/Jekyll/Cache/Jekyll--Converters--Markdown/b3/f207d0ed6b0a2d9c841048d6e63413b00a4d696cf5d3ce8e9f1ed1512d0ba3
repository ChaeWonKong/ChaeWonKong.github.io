I"V<<p>경우에 따라서 텍스트가 입력되는 만큼 텍스트필드의 넓이가 넓어지도록 구현해야할 수가 있습니다.
바로 아래 사진 처럼 말이죠.</p>

<p><img src="https://firebasestorage.googleapis.com/v0/b/codechats.appspot.com/o/blog%2Fcontent-editable.gif?alt=media" alt="content-editable" /></p>

<p>오늘은 <code class="language-plaintext highlighter-rouge">contenteditable</code> 속성을 이용해,</p>

<ol>
  <li>7글자까지만 입력 가능하고(maxLength),</li>
  <li>작성하는 텍스트의 너비만큼 input 영역의 너비가 확장되는</li>
</ol>

<p>그런 컴포넌트를 구현해 보겠습니다.</p>

<h2 id="차례">차례</h2>

<ol>
  <li><a href="#info">contenteditable 속성 알아보기</a></li>
  <li><a href="#resize">글자수에 따라 늘어나는 contenteditable 구현</a></li>
  <li><a href="#placeholder">contenteditable이 적용된 엘리먼트에 placeholder 추가하기</a></li>
  <li><a href="#length-limit">contenteditable에 글자수 제한 도입하기</a></li>
  <li><a href="#ref">참고자료</a></li>
</ol>

<h2 id="contenteditable-속성-알아보기">Contenteditable 속성 알아보기</h2>

<p><span id="info"></span></p>

<p>HTML5의 모든 엘리먼트는 <code class="language-plaintext highlighter-rouge">contenteditable='true'</code>로 설정함으로써 해당 엘리먼트 내부에 텍스트를 작성할 수 있게 됩니다.</p>

<p>contenteditable 속성은 열거형(enum) 속성인데, <code class="language-plaintext highlighter-rouge">true</code>, <code class="language-plaintext highlighter-rouge">false</code> 이외에도 <code class="language-plaintext highlighter-rouge">inherit</code>을 가질 수 있습니다.
기본(default)은 부모요소에서 편집가능 여부를 상속받는 <code class="language-plaintext highlighter-rouge">inherit</code>입니다.</p>

<p>참고로, <code class="language-plaintext highlighter-rouge">HTMLElement.isContentEditable</code>와 같이 접근하여 HTMLElement의 contenteditable 속성을 불리언(boolean) 값으로도 받아볼 수 있습니다.</p>

<p>즉, <code class="language-plaintext highlighter-rouge">input</code>, <code class="language-plaintext highlighter-rouge">textarea</code>와 같은 종래에 텍스트필드로 사용되던 엘리먼트 이외에 <code class="language-plaintext highlighter-rouge">div</code>, <code class="language-plaintext highlighter-rouge">span</code> 등의 엘리먼트도 텍스트 필드로 변화시킬 수 있는 것이죠.</p>
<blockquote>
  <p>참고: <a href="https://developer.mozilla.org/ko/docs/Web/Guide/HTML/Content_Editable">MDN Docs</a></p>
</blockquote>

<p><code class="language-plaintext highlighter-rouge">contenteditable</code> 속성은 거의 모든 브라우저에서 폭넓게 지원됩니다.</p>

<p><a href="https://developer.mozilla.org/ko/docs/Web/HTML/Global_attributes/contenteditable">
  <img alt="MDN content editable browser support" src="https://firebasestorage.googleapis.com/v0/b/codechats.appspot.com/o/blog%2Fcontenteditable-browser-support.png?alt=media" />
</a></p>
<blockquote>
  <p>출처: <a href="https://developer.mozilla.org/ko/docs/Web/HTML/Global_attributes/contenteditable">MDN HTML 웹/HTML/전역 요소/contenteditable</a></p>
</blockquote>

<p><span id="resize"></span></p>

<h2 id="글자수에-따라-늘어나는-contenteditable-구현">글자수에 따라 늘어나는 contenteditable 구현</h2>

<p>다음으로 입력되는 글자수에 비례해 너비가 늘어나는 contenteditable 엘리먼트를 구현해 보겠습니다.<br />
편의상 글 최상단에서 보여드린 gif처럼 밑줄로 텍스트 입력 영역을 표현하겠습니다.</p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Dispatch</span><span class="p">,</span> <span class="nx">useRef</span><span class="p">,</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">styled</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">styled-components</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Input</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">span</span><span class="s2">`
  display: inline-block;
  font-weight: lighter;
  border-bottom: 1px solid #232323;
  font-size: 34px;
  max-width: calc(100% - 32px);
  min-width: 50px;
`</span>

<span class="kr">interface</span> <span class="nx">Props</span><span class="p">{</span>
  <span class="nl">value</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">onChange</span><span class="p">:</span> <span class="nx">Dispatch</span><span class="o">&lt;</span><span class="nx">React</span><span class="p">.</span><span class="nx">SetStateAction</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;&gt;</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">AutoWidthInput</span> <span class="o">=</span> <span class="p">({</span>
  <span class="nx">value</span><span class="p">,</span>
  <span class="nx">onChange</span><span class="p">,</span>
<span class="p">}:</span> <span class="nx">Props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">setEditable</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="si">}</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">S</span><span class="p">.</span><span class="nc">Input</span>
        <span class="na">spellCheck</span><span class="p">=</span><span class="si">{</span> <span class="kc">false</span> <span class="si">}</span>
        <span class="na">contentEditable</span>
        <span class="na">onInput</span><span class="p">=</span><span class="si">{</span>
            <span class="p">(</span><span class="nx">e</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">ChangeEvent</span><span class="o">&lt;</span><span class="nx">HTMLSpanElement</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">=&gt;</span>  <span class="nx">onChange</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">innerText</span><span class="p">);</span>
          <span class="si">}</span>
      <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div>

<p>우선 다른 컴포넌트에서 input의 change와 value를 control하도록 만들어 보았습니다.</p>

<p>즉, <code class="language-plaintext highlighter-rouge">value</code>와 <code class="language-plaintext highlighter-rouge">onChange</code>를 props로 받는 것이죠. contenteditable로 설정된 엘리먼트의 <code class="language-plaintext highlighter-rouge">innerText</code> 값이 변경될 경우,
<code class="language-plaintext highlighter-rouge">props.onChange</code>가 동작해 해당 컴포넌트의 부모 컴포넌트가 변경사실을 관리하게 됩니다.</p>

<p>React에서 <code class="language-plaintext highlighter-rouge">contenteditable={ true }</code>의 경우 <code class="language-plaintext highlighter-rouge">contenteditable</code>로만 놓아도 기본값(default value)으로 <code class="language-plaintext highlighter-rouge">true</code>가 들어가므로,
속성값에는 <code class="language-plaintext highlighter-rouge">contenteditable</code>만 작성하면 됩니다.</p>

<p><code class="language-plaintext highlighter-rouge">spellCheck</code> 속성은 오타가 있을 경우 붉은 물결 밑줄을 표시할 것인지를 결정합니다. 기본값(default value)은 <code class="language-plaintext highlighter-rouge">true</code>입니다.</p>

<p>제 경우, 사용자의 닉네임을 입력받는 텍스트 필드이기 때문에, 오타를 검증하지 않도록 <code class="language-plaintext highlighter-rouge">spellCheck={ false }</code>로 설정했습니다.</p>

<p><strong><code class="language-plaintext highlighter-rouge">onInput</code> 속성으로 입력값을 관리합니다. contenteditable이 설정된 요소(element)의 innerText(혹은 innerHTML)에 사용자가 “쓰기”를 진행할 경우 발생되는 이벤트입니다.</strong></p>

<p>TypeScript를 사용하고 있으므로 onInput에도 타입을 적절히 지정해 줍니다.
span 엘리먼트를 이용하고 있으므로, <code class="language-plaintext highlighter-rouge">React.ChangeEvent&lt;HTMLSpanElement&gt;</code>가 Event의 타입이 됩니다.</p>

<p><span id="placeholder"></span></p>

<h2 id="contenteditable이-적용된-엘리먼트에-placeholder-추가하기">contenteditable이 적용된 엘리먼트에 placeholder 추가하기</h2>

<p>다음으로 placeholder를 사용하는 방법을 알아보겠습니다.</p>

<p>input이나 textarea와는 달리 <strong>contenteditable 속성을 <code class="language-plaintext highlighter-rouge">true</code>로 주어도 placeholder 속성이 바로 적용되지는 않습니다.</strong></p>

<p>별도로 설정해줘야만 하는 것이죠.</p>

<p>해당 엘리먼트의 CSS에 다음 속성을 추가해 주어야 합니다.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">//</span> <span class="nt">placeholder</span>
<span class="o">&amp;</span><span class="nd">:empty:before</span> <span class="p">{</span>
  <span class="nl">content</span><span class="p">:</span> <span class="n">attr</span><span class="p">(</span><span class="n">placeholder</span><span class="p">);</span>
  <span class="nl">color</span><span class="p">:</span> <span class="n">grey</span><span class="p">;</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">inline-block</span><span class="p">;</span>
<span class="p">}</span><span class="o">;</span>
</code></pre></div></div>

<p>또, contenteditable이 설정된 엘리먼트에 placeholder도 추가해 줘야 하죠.</p>

<p><code class="language-plaintext highlighter-rouge">placeholder='이름 또는 애칭'</code>을 JSX 요소의 속성으로 추가해 줍니다.</p>

<p>즉, 우리의 코드는 아래처럼 바뀌게 됩니다.</p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Dispatch</span><span class="p">,</span> <span class="nx">useRef</span><span class="p">,</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">styled</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">styled-components</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Input</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">span</span><span class="s2">`
  display: inline-block;
  font-weight: lighter;
  border-bottom: 1px solid #232323;
  font-size: 34px;
  max-width: calc(100% - 32px);
  min-width: 50px;

  // placeholder
  &amp;:empty:before {
    content: attr(placeholder);
    color: grey;
    display: inline-block;
  };
`</span>

<span class="kr">interface</span> <span class="nx">Props</span><span class="p">{</span>
  <span class="nl">value</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">onChange</span><span class="p">:</span> <span class="nx">Dispatch</span><span class="o">&lt;</span><span class="nx">React</span><span class="p">.</span><span class="nx">SetStateAction</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;&gt;</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">AutoWidthInput</span> <span class="o">=</span> <span class="p">({</span>
  <span class="nx">value</span><span class="p">,</span>
  <span class="nx">onChange</span><span class="p">,</span>
<span class="p">}:</span> <span class="nx">Props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">setEditable</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="si">}</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">S</span><span class="p">.</span><span class="nc">Input</span>
        <span class="na">placeholder</span><span class="p">=</span><span class="s">'이름 또는 애칭'</span>
        <span class="na">spellCheck</span><span class="p">=</span><span class="si">{</span> <span class="kc">false</span> <span class="si">}</span>
        <span class="na">contentEditable</span>
        <span class="na">onInput</span><span class="p">=</span><span class="si">{</span>
            <span class="p">(</span><span class="nx">e</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">ChangeEvent</span><span class="o">&lt;</span><span class="nx">HTMLSpanElement</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">=&gt;</span>  <span class="nx">onChange</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">innerText</span><span class="p">);</span>
          <span class="si">}</span>
      <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div>

<p><span id="length-limit"></span></p>

<h2 id="contenteditable에-글자수-제한-도입하기">contenteditable에 글자수 제한 도입하기</h2>

<h2 id="참고자료">참고자료</h2>

<p><span id="ref"></span></p>

<ul>
  <li><a href="https://developer.mozilla.org/ko/docs/Web/Guide/HTML/Content_Editable">MDN Docs</a></li>
  <li><a href="https://developer.mozilla.org/ko/docs/Web/HTML/Global_attributes/contenteditable">MDN HTML 웹/HTML/전역 요소/contenteditable</a></li>
</ul>
:ET