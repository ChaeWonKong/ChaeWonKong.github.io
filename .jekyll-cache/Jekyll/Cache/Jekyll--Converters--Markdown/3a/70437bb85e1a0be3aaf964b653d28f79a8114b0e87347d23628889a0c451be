I"ß(<p>Today I learned about array, slice, map and struct of Go.</p>

<h3 id="array">Array</h3>
<p>In Go, array can be defined like:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">names</span> <span class="o">:=</span> <span class="p">[</span><span class="m">5</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span><span class="s">"a"</span><span class="p">,</span> <span class="s">"b"</span><span class="p">}</span>
</code></pre></div></div>

<p>Unlike JavaScriptâ€™s array or Pythonâ€™s list, the lenght of array in Go is fixed.
In case above, I created array with length of 5.
so, case below throws an error:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">names</span><span class="p">[</span><span class="m">2</span><span class="p">]</span> <span class="o">=</span> <span class="s">"c"</span>
<span class="n">names</span><span class="p">[</span><span class="m">3</span><span class="p">]</span> <span class="o">=</span> <span class="s">"d"</span>
<span class="n">names</span><span class="p">[</span><span class="m">4</span><span class="p">]</span> <span class="o">=</span> <span class="s">"e"</span>

<span class="c">// below throws an error</span>
<span class="n">names</span><span class="p">[</span><span class="m">5</span><span class="p">]</span> <span class="o">=</span> <span class="s">"f"</span>
</code></pre></div></div>

<p>Array can be traversed by using <code class="language-plaintext highlighter-rouge">for</code> loop and <code class="language-plaintext highlighter-rouge">range</code>.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">simpleArray</span> <span class="o">:=</span> <span class="p">[</span><span class="m">5</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span><span class="s">"a"</span><span class="p">,</span> <span class="s">"b"</span><span class="p">,</span> <span class="s">"c"</span><span class="p">,</span> <span class="s">"d"</span><span class="p">,</span> <span class="s">"e"</span><span class="p">}</span>
<span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">element</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">simpleArray</span> <span class="p">{</span>
  <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">element</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="slice">Slice</h3>
<p>Slices are simmilar to array, yet the length is not fixed; dynamic.</p>

<p>There are briefly two ways to create slices.</p>

<p>First, using <code class="language-plaintext highlighter-rouge">make</code>.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">10</span><span class="p">)</span>
</code></pre></div></div>

<p>Code above generates a slice length of 5 and max-length of 10.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">30</span><span class="p">,</span> <span class="m">100</span><span class="p">}</span>
</code></pre></div></div>

<p>Code above generates a slice that automatically has length of 4.</p>

<p>The size of a slice is dynamically determined.</p>

<p>by using <code class="language-plaintext highlighter-rouge">append</code>, new slice with appended data could be easily created.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">}</span>
<span class="n">b</span> <span class="o">:=</span> <span class="nb">append</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="m">4</span><span class="p">)</span>
<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
<span class="c">// [1 2 3 4]</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">range</code> is available just like arrays.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">simpleSlice</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">"a"</span><span class="p">,</span> <span class="s">"b"</span><span class="p">,</span> <span class="s">"c"</span><span class="p">,</span> <span class="s">"d"</span><span class="p">}</span>
<span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">element</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">simpleSlice</span> <span class="p">{</span>
  <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">element</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="map">Map</h3>
<p>Map offers a key / value store. Simmilar to Javaâ€™s map.
Unlike JavaScript or Python, however, the map in go should only have predetermined type of key / value pairs.</p>

<p>For instance,</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">stringMap</span> <span class="o">:=</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span><span class="s">"name"</span><span class="o">:</span> <span class="s">"Leon"</span><span class="p">,</span> <span class="s">"age"</span><span class="o">:</span> <span class="s">"29"</span><span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">stringMap</code> should only have string key and string value.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">simpleMap</span> <span class="o">:=</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="s">"year"</span><span class="o">:</span> <span class="m">2020</span><span class="p">,</span> <span class="s">"month"</span><span class="o">:</span> <span class="m">9</span><span class="p">,</span> <span class="s">"day"</span><span class="o">:</span> <span class="m">16</span><span class="p">}</span>
<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">simpleMap</span><span class="p">)</span>
<span class="c">// map[day:16 month:9 year:2020]</span>
</code></pre></div></div>

<p>Maps can be iterated like arrays do:</p>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// Map</span>
<span class="n">simpleMap</span> <span class="o">:=</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span><span class="s">"name"</span><span class="o">:</span> <span class="s">"Leon"</span><span class="p">,</span> <span class="s">"age"</span><span class="o">:</span> <span class="s">"29"</span><span class="p">}</span>
<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">simpleMap</span><span class="p">)</span>
<span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">simpleMap</span> <span class="p">{</span>
	<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="struct">Struct</h3>
<p>A Struct can contain multiple types of values.
Simmilar to maps, structs stores key / value pairs of data.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">person</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">name</span>          <span class="kt">string</span>
	<span class="n">age</span>           <span class="kt">int</span>
	<span class="n">favoriteFoods</span> <span class="p">[]</span><span class="kt">string</span>
<span class="p">}</span>

<span class="n">favoriteFoods</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">"Spaghetti"</span><span class="p">,</span> <span class="s">"bulgogi"</span><span class="p">}</span>
<span class="n">leon</span> <span class="o">:=</span> <span class="n">person</span><span class="p">{</span><span class="n">name</span><span class="o">:</span> <span class="s">"Leon"</span><span class="p">,</span> <span class="n">age</span><span class="o">:</span> <span class="m">29</span><span class="p">,</span> <span class="n">favoriteFoods</span><span class="o">:</span> <span class="n">favoriteFoods</span><span class="p">}</span>
<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">leon</span><span class="p">)</span>
<span class="c">// {Leon 29 [Spaghetti bulgogi]}</span>
</code></pre></div></div>
:ET