I"3<p>요즘은 대부분의 웹 서비스가 모바일 기기 비중이 더 높을 것이라고 생각합니다.
“반응형 웹”은 필수처럼 되었고, “모바일 퍼스트 디자인”이라는 말이 공공연하게 받아들여질 정도죠.</p>

<p>이제 웹 개발자는 IE, 크롬, 사파리에서 확인하는 것만으론 부족합니다. 모바일, 태블릿 등 기기별로 서로 상이한 사이즈, 더욱 다양해진 브라우저를 고려해 개발해야 합니다.</p>

<p>점점 흔해지는 웹뷰에서의 디버깅 역시 고통스러운 경우가 많죠.</p>

<p>텐센트에서 개발한 오픈소스인 vConsole을 이용하면 웹 프론트엔드에서의 디버깅이 보다 편리해 집니다.
<strong>웹뷰나 모바일웹에서 버튼만 클릭하면 콘솔탭이 올라오고, 로그, 네트워크, 스토리지 등을 확인할 수 있게 됩니다.</strong></p>

<h2 id="tldr">TL;DR</h2>
<p>vConsole 쓰세요.</p>

<p>vConsole은 <strong>모바일 기기 내 웹을 위한 크롬 개발자 도구</strong>와 유사합니다. <br />
<strong>console log, 네트워크, 쿠키, 세션/로컬 스토리지</strong>를 모두 모바일웹에서 확인할 수 있습니다.</p>

<h2 id="제공되는-기능">제공되는 기능</h2>
<p>Demo를 경험하고 싶다면 <a href="https://github.com/Tencent/vConsole">https://github.com/Tencent/vConsole</a>를 확인해 주세요.</p>

<table>
  <thead>
    <tr>
      <th>버튼</th>
      <th>콘솔창</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><img src="https://raw.githubusercontent.com/ChaeWonKong/image-resource/master/vconsole1.PNG?raw=true" alt="vconsole-button-view" /></td>
      <td><img src="https://raw.githubusercontent.com/ChaeWonKong/image-resource/master/vconsole2.PNG?raw=true" alt="vconsole-console-view" /></td>
    </tr>
  </tbody>
</table>

<p>왼쪽 사진에 <code class="language-plaintext highlighter-rouge">vConsole</code>이라는 초록색 버튼 보이시나요?</p>

<p>저 버튼을 클릭하면 오른쪽처럼 아래에서 콘솔창이 드르륵 올라옵니다. <br />
참고로 <strong>vConsole 버튼은 손가락으로 탭해 원하는 위치로 이동시킬 수 있습니다.</strong>  <br />
배경의 컨텐츠가 가려져 불편하다면 드래그해 원하는 위치로 버튼을 이동시킬 수 있는 것이죠.</p>

<p><br /><br />
다음으로 사용법을 알아보겠습니다.</p>

<h2 id="설치">설치</h2>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>npm <span class="nb">install </span>vconsole
</code></pre></div></div>

<h2 id="일반적인-사용법">일반적인 사용법</h2>
<p>만약 순수 JavaScript에서 사용한다면 아래처럼 사용하면 된다고 하네요.</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"path/to/vconsole.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script&gt;</span>
  <span class="c1">// init vConsole</span>
  <span class="kd">var</span> <span class="nx">vConsole</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">VConsole</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello world</span><span class="dl">'</span><span class="p">);</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div></div>

<blockquote>
  <p>참고링크: <a href="https://github.com/Tencent/vConsole#usage">vConsole - Usage</a></p>
</blockquote>

<p>저는 React를 사용하고 있기 때문에, React에서의 사용법을 알아보겠습니다.</p>

<h3 id="react에서의-사용법">React에서의 사용법</h3>
<p>우선 사용할 때는 이렇게 import하면 됩니다.
TypeScript를 쓰시는 분만 <code class="language-plaintext highlighter-rouge">VConsoleConfig</code>를 import해 주세요.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">vConsole</span><span class="p">,</span> <span class="p">{</span> <span class="nx">VConsoleConfig</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">vconsole</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div>

<p><br />
여기서 default로 import되는 vConsole의 경우 생성자함수입니다. <br />
<code class="language-plaintext highlighter-rouge">new vConsole(vConsoleConfig)</code> 형태로 사용할 수 있다는 말이지요.
<br />
<br />
<code class="language-plaintext highlighter-rouge">vConsoleConfig</code>에 무엇이 들어갈 수 있는지 좀 확인해봐야겠죠?
API를 조금 확인해 보겠습니다.
<br /></p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kr">interface</span> <span class="nx">VConsoleConfig</span> <span class="p">{</span>
  <span class="nl">defaultPlugins</span><span class="p">?:</span> <span class="kr">string</span><span class="p">[]</span>
  <span class="nx">onReady</span><span class="p">?:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="k">void</span>
  <span class="nx">onClearLog</span><span class="p">?:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="k">void</span>
  <span class="nx">maxLogNumber</span><span class="p">?:</span> <span class="kr">number</span>
  <span class="nx">disableLogScrolling</span><span class="p">?:</span> <span class="nx">boolean</span>
<span class="p">}</span>
</code></pre></div></div>
<p><br /></p>

<table>
  <thead>
    <tr>
      <th>Key</th>
      <th>Type</th>
      <th>optional</th>
      <th>Default value</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>defaultPlugins</td>
      <td>Array</td>
      <td>true</td>
      <td>[‘system’, ‘network’, ‘element’, ‘storage’]</td>
      <td>배열로 주어진 플러그인들은 실행되어 vConsole에 얹어집니다.</td>
    </tr>
    <tr>
      <td>onReady</td>
      <td>Function</td>
      <td>true</td>
      <td> </td>
      <td>vConsole이 실행되고 defaultPlugins이 로드되면 실행되는 콜백함수입니다.</td>
    </tr>
    <tr>
      <td>onClearLog</td>
      <td>Function</td>
      <td>true</td>
      <td> </td>
      <td>로그 및 시스템 패널에서 “Clear” 버튼이 클릭되면 실행되는 콜백함수입니다.</td>
    </tr>
    <tr>
      <td>maxLogNumber</td>
      <td>Number</td>
      <td>true</td>
      <td>1000</td>
      <td>로그 탭에 보일 수 있는 최대 라인 수를 설정합니다. 최대 라인수를 초과한 로그들은 로그 탭에서 삭제됩니다.</td>
    </tr>
    <tr>
      <td>disableLogScrolling</td>
      <td>Boolean</td>
      <td>true</td>
      <td> </td>
      <td>만약 <code class="language-plaintext highlighter-rouge">false</code>라면 새 로그를 프린트하면서 패널은 스크롤되지 않습니다.</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>참고링크: <a href="https://github.com/Tencent/vConsole/blob/dev/doc/public_properties_methods.md">vConsole - Public Properties &amp; Methods
</a></p>
</blockquote>

<p>네, <code class="language-plaintext highlighter-rouge">defaultPlugin</code>은 콘솔 내에서 어떤 탭들을 보여줄 것인지에 대한 것이고요. 기본적으로는 로그와 더불어 시스템, 네트워크, 엘리먼트, 스토리지가 활성화 되어 있는데, 필요한 것만 배열에 담아 쓰시면 됩니다.</p>

<p><code class="language-plaintext highlighter-rouge">onReady</code>는 vConsole이 준비되었을 때 실행되는 콜백함수입니다.
<br />
이정도만 알면 사실 바로 이용할 수 있습니다.</p>

<p>저는 vConsole을 별도의 module로 만들어 사용하겠습니다.</p>

<h3 id="vconsole-모듈-만들기">vConsole 모듈 만들기</h3>
<p><strong>vConsole.ts</strong></p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">vConsole</span><span class="p">,</span> <span class="p">{</span> <span class="nx">VConsoleConfig</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">vconsole</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">initVConsole</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="na">config</span><span class="p">:</span> <span class="nx">VConsoleConfig</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">onReady</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">button</span> <span class="o">=</span> <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">.vc-switch</span><span class="dl">'</span><span class="p">))</span> <span class="k">as</span> <span class="nx">HTMLElement</span><span class="p">;</span>
      <span class="nx">button</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">position</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">fixed</span><span class="dl">'</span><span class="p">;</span>
      <span class="nx">button</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">bottom</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">200px</span><span class="dl">'</span><span class="p">;</span>
    <span class="p">},</span>
  <span class="p">};</span>
  <span class="k">new</span> <span class="nx">vConsole</span><span class="p">(</span><span class="nx">config</span><span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">onReady</code> 함수를 이용해 vConsole 버튼의 위치를 잡아주고 있습니다.
<code class="language-plaintext highlighter-rouge">vc-switch</code>라는 클래스를 가져와 스타일을 지정해주는 것이죠.</p>

<h3 id="모듈-사용하기">모듈 사용하기</h3>
<p>사용하실 때는 root의 index에서 import해 init해주시면 됩니다.
<code class="language-plaintext highlighter-rouge">ReactDom.redner()</code> 가 호출되는 바로 그 index에서 진행해 보겠습니다.</p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">initVConsole</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../vConsole</span><span class="dl">'</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">development</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">initVConsole</span><span class="p">();</span>
<span class="p">}</span>

<span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
  <span class="p">&lt;</span><span class="nc">Provider</span> <span class="na">store</span><span class="p">=</span><span class="si">{</span> <span class="nx">store</span> <span class="si">}</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nc">GlobalStyles</span> <span class="p">/&gt;</span>
    <span class="p">&lt;</span><span class="nc">Routes</span> <span class="p">/&gt;</span>
  <span class="p">&lt;/</span><span class="nc">Provider</span><span class="p">&gt;,</span>
  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">root</span><span class="dl">'</span><span class="p">),</span>
<span class="p">);</span>
</code></pre></div></div>

<p>여기서 <code class="language-plaintext highlighter-rouge">isDevelopment()</code> 함수는 개발계(development) 배포인지 실서버(production) 배포인지를 구분해주는 함수입니다.
실제 사용자에게 나가는 프로덕트라면 당연히 <code class="language-plaintext highlighter-rouge">vConsole</code>이 비활성화 되어야겠죠.</p>
:ET