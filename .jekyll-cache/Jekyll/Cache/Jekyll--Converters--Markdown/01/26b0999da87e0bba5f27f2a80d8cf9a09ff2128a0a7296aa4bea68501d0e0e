I"ԝ<p>React Native 프로젝트에 TypeScript로 Redux를 적용해보자.</p>

<h2 id="목차">목차</h2>

<ol>
  <li><a href="#0">목표</a></li>
  <li><a href="#1">준비 사항 및 참고 사항</a></li>
  <li><a href="#2">Redux 설치하기</a></li>
  <li><a href="#3">관련 디렉토리 생성하기</a></li>
  <li><a href="#4">Actions</a></li>
  <li><a href="#5">Reducers</a></li>
  <li><a href="#6">Redux를 활용해 API로 가져온 posts 저장하기</a></li>
  <li><a href="#7">참고자료</a></li>
</ol>

<p id="0" />

<h2 id="1-목표">1. 목표</h2>

<p>이번 포스트의 목표는 TypeScript를 이용해 React Native 프로젝트에 Redux를 구현하는 것이다.</p>

<p><strong>데이터(유튜브 영상의 목록)를 API로 가져와서 Redux 스토어(store)에 저장하는 기능을 구현</strong>해보기로 한다.</p>

<p id="1" />

<h2 id="2-준비-사항-및-참고-사항">2. 준비 사항 및 참고 사항</h2>

<ul>
  <li>Lodash 설치(deep clone을 쉽게 사용하기 위해 필요)</li>
  <li>TypeScript가 적용된 React Native 프로젝트(<a href="https://chaewonkong.github.io/posts/typescript-with-react-native.html">“React Native에서 TypeScript 사용하기” 포스트 보기</a>)</li>
  <li>프로젝트 디렉토리 구성: 개략적인 프로젝트 구성은 아래와 같다. actions, reducers 디렉토리는 본 포스트를 따라가며 생성해 나갈 것이다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>android
ios
index.tsx
node_modules
. . .
src
├── actions
│   ├── index.ts
│   └── types.ts
├── api
│   └── index.ts
├── components
│   ├── App.tsx
│   ├── Header.tsx
│   └── List.tsx
├── reducers
│   ├── index.ts
│   └── postReducer.ts
└── shared-interfaces.ts
</code></pre></div></div>

<ul>
  <li>예시 API Response: posts는 아래 오브젝트와 같은 구조의 오브젝트들이 리스트 형태로 들어있다.</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"posts"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
      </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"말좀 예쁘게하세요"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"content"</span><span class="p">:</span><span class="w"> </span><span class="s2">"예쁘게예쁘게 ^^"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"video_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SJUsz8HV5mQ"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"author"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Leon"</span><span class="w">
    </span><span class="p">},</span><span class="w">
  </span><span class="err">...</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>shared-interfaces.ts</li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kr">interface</span> <span class="nx">ISimplePost</span> <span class="p">{</span>
  <span class="nl">id</span><span class="p">:</span> <span class="kr">string</span> <span class="o">|</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nl">title</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">video_id</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">author</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">type</span> <span class="nx">IPosts</span> <span class="o">=</span><span class="nx">ISimplePost</span><span class="p">[]</span>
</code></pre></div></div>

<p id="2" />

<h2 id="3-redux-설치하기">3. Redux 설치하기</h2>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add redux react-redux
yarn add <span class="nt">--dev</span> @types/redux @types/react-redux
</code></pre></div></div>

<p>@types로 설치하는 라이브러리는 type definition을 추가해 주기 위해 설치하는 것이므로 dev-dependency로 설치한다.
<strong>react-redux는 React를 위한 공식 redux 바인딩이다.</strong></p>

<p id="3" />

<h2 id="4-관련-디렉토리-생성하기">4. 관련 디렉토리 생성하기</h2>

<p>다음으로 필요한 디렉토리를 생성하자. src 디렉토리에 하위 디렉토리로 actions와 reducers 디렉토리를 각각 생성한다.
actions에는 Action Creator가, reducers에는 Reducer가 들어갈 것이다.</p>

<p id="4" />

<h2 id="5-actions">5. Actions</h2>

<h3 id="actionstypests">actions/types.ts</h3>

<p>먼저 type을 지정하는 파일을 생성하자.
actions/types.ts 파일을 생성한다.
여기서 <strong>type은 reducer에서 action을 처리할 때, 그 action의 종류를 한 번에 식별할 수 있는 String 혹은 Symbol</strong>을 의미한다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">IPosts</span><span class="p">,</span> <span class="nx">ISimplePost</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../shared-interfaces</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kr">enum</span> <span class="nx">POSTS_ACTION_TYPES</span> <span class="p">{</span>
  <span class="nx">UPDATE_POSTS</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">POSTS/UPDATE_POSTS</span><span class="dl">"</span><span class="p">,</span>
  <span class="nx">GET_POSTS</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">POSTS/GET_POSTS</span><span class="dl">"</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">type</span> <span class="nx">GetPostAction</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span>
    <span class="na">payload</span><span class="p">:</span> <span class="nx">ISimplePost</span><span class="p">[]</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">type</span> <span class="nx">PostListState</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">posts</span><span class="p">:</span> <span class="nx">ISimplePost</span><span class="p">[];</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kd">type</span> <span class="nx">AppState</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">postList</span><span class="p">:</span> <span class="nx">PostListState</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<p>POSTS_ACTIONS_TYPES는 enum으로 선언하되 String을 넣어주었다. Redux의 type은 반드시 String 타입이어야 한다(Number 타입이면 안됨).</p>

<p>GetPostAction은 action의 type을 지정해주기 위한 타입이다.</p>

<p>PostListState는 추후 작성할 Reducer에서 사용할 initialState의 타입이다.</p>

<p>AppState는 List.tsx 컴포넌트에서 사용될 타입이다. 추후 등장하면 다시 설명한다.</p>

<h3 id="actionsindexts">actions/index.ts</h3>

<p>actions 폴더 안에 index.ts 파일을 생성한다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">GetPostAction</span><span class="p">,</span> <span class="nx">POSTS_ACTION_TYPES</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./types</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">IPosts</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../shared-interfaces</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">getPosts</span> <span class="o">=</span> <span class="p">(</span><span class="nx">posts</span><span class="p">:</span> <span class="nx">ISimplePost</span><span class="p">[]):</span> <span class="nx">GetPostAction</span> <span class="o">=&gt;</span> <span class="p">({</span>
  <span class="na">type</span><span class="p">:</span> <span class="nx">POSTS_ACTION_TYPES</span><span class="p">.</span><span class="nx">GET_POSTS</span><span class="p">,</span>
  <span class="na">payload</span><span class="p">:</span> <span class="nx">posts</span>
<span class="p">});</span>
</code></pre></div></div>

<p>우리는 getPosts라는 Action Creator를 정의할 것이다. 이 action은 posts를 Payload로 Reducer에 넘긴다.</p>

<p>여기서 다시 한번 type과 payload에 대해 짚고 넘어가자.
<strong>type은 reducer에서 action을 처리할 때, 그 action의 종류를 한 번에 식별할 수 있는 String 혹은 Symbol이다.</strong>
<strong>payload는 action의 실행을 위해 제공되는 데이터를 담는 Object이다.</strong></p>

<p>우리가 만든 getPosts Action Creator는 POSTS_ACTION_TYPES.GET_POSTS을 type으로, posts를 payload로 리턴한다.</p>

<p id="5" />

<h2 id="6-reducers">6. Reducers</h2>

<p>다음으로 Reducer를 작성할 차례이다. Reducer 함수는 순수 함수여야 한다. 이것만 기억하고 진행하자.</p>

<h3 id="reducersindexts">reducers/index.ts</h3>

<p>index.ts에서는 추후 Reducer의 개수가 늘어날 경우를 대비해 Reducer들을 묶어서 내보낼 수 있도록 설정해두자.
(물론 지금은 1개의 Reducer만 존재하므로 아직은 불필요한 기능이다)</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">combineReducers</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">redux</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">postList</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./postReducer</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">combineReducers</span><span class="p">({</span>
  <span class="nx">postList</span>
<span class="p">});</span>
</code></pre></div></div>

<h3 id="postreducerts">postReducer.ts</h3>

<p>다음으로 우리의 첫 Reducer인 postReducer를 작성해보자.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span>
  <span class="nx">PostListState</span><span class="p">,</span>
  <span class="nx">GetPostAction</span><span class="p">,</span>
  <span class="nx">POSTS_ACTION_TYPES</span>
<span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../actions/types</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">_</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">lodash</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">initalState</span><span class="p">:</span> <span class="nx">PostListState</span> <span class="o">=</span> <span class="p">{</span> <span class="na">posts</span><span class="p">:</span> <span class="p">[]</span> <span class="p">};</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">postList</span> <span class="o">=</span> <span class="p">(</span>
  <span class="nx">state</span><span class="p">:</span> <span class="nx">PostListState</span> <span class="o">=</span> <span class="nx">initalState</span><span class="p">,</span>
  <span class="nx">action</span><span class="p">:</span> <span class="nx">GetPostAction</span>
<span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="na">newState</span><span class="p">:</span> <span class="nx">PostListState</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">cloneDeep</span><span class="p">(</span><span class="nx">state</span><span class="p">);</span>
  <span class="k">switch</span> <span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="nx">POSTS_ACTION_TYPES</span><span class="p">.</span><span class="na">GET_POSTS</span><span class="p">:</span>
      <span class="k">return</span> <span class="p">{</span><span class="na">posts</span><span class="p">:</span> <span class="p">[...</span><span class="nx">initalState</span><span class="p">.</span><span class="nx">posts</span><span class="p">,</span> <span class="p">...</span><span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">]}</span>
    <span class="nl">default</span><span class="p">:</span>
      <span class="k">return</span> <span class="nx">newState</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p>먼저 initialState는 상태의 초깃값을 선언하기 위한 변수이다.</p>

<p>우리가 작성할 Reducer 함수의 이름은 postList이다. postList는 state와 action을 매개변수로 받는데 state에는 디폴트로 앞서 선언한 initialState가 들어있다.</p>

<p>action에는 앞서 설명했듯 type과 payload가 들어있다.</p>

<p><strong>Reducer에서는 보통 switch문을 사용해서 action의 type에 따라 전역 스토어의 상태를 업데이트 한다.</strong> 즉, <strong>각 action.type의 케이스 별로 다른 return</strong>을 하게 되는데, 여기서 return 하는 Object가 Redux의 store에 저장되는 것이다.</p>

<h3 id="store-추가하기">store 추가하기</h3>

<p>자, 이제 store를 생성하고 우리 프로젝트에 추가할 단계다.
src/components/App.tsx를 열자.
여기서 App.tsx는 루트의 index.tsx에서 임포트하는 가장 상위 컴포넌트다.</p>

<h4 id="before">Before</h4>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Navigator</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../Navigator</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="nx">createStore</span><span class="p">(</span><span class="nx">reducer</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">&lt;</span><span class="nc">Navigator</span> <span class="p">/&gt;;</span>
<span class="p">};</span>
</code></pre></div></div>

<h4 id="after">After</h4>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">createStore</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">redux</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Provider</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-redux</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">reducer</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../reducers</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Navigator</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../Navigator</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="nx">createStore</span><span class="p">(</span><span class="nx">reducer</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Provider</span> <span class="na">store</span><span class="p">=</span><span class="si">{</span><span class="nx">store</span><span class="si">}</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">Navigator</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Provider</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div>

<p>Navigator는 react-navigation과 관련된 것이므로 일단 신경쓰지 말자.</p>

<p>createStore는 우리가 이전에 작성한 Reducer로 store를 만들어주는 함수다.</p>

<p>핵심은 이것이다. <strong>store를 선언하고 Provider에 store를 prop으로 넘긴 후 그 Provider로 기존의 App 컴포넌트를 감싼다.</strong>
과정이 헷갈릴 수 있을까봐 Before와 After를 구분했다. 우리의 코드는 After와 같은 형태가 되어야 한다.</p>

<p id="6" />

<h2 id="7-redux를-활용해-api로-가져온-posts-저장하기">7. Redux를 활용해 API로 가져온 posts 저장하기</h2>

<p>이제 우리가 구현한 Redux store를 사용해볼 차례다.</p>

<h3 id="srccomponentslisttsx">src/components/List.tsx</h3>

<p>먼저 간단히 설명하자면, Hooks를 사용한 Functional Component 형태로 List.tsx를 구성할 것이다.</p>

<p>List.tsx는 유튜브 영상 목록을 가져와 리스트 뷰로 뿌려준다. 원래는 스타일 등 더 복잡한 코드이지만,
Redux의 작동을 살피는 것이 목적이므로 코드는 간단하게 첨부했다.</p>

<p>우리가 작성하고자 하는 최종 코드는 아래와 같다.</p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">View</span><span class="p">,</span> <span class="nx">Text</span><span class="p">,</span> <span class="nx">ScrollView</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-native</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ISimplePost</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../shared-interfaces</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">getPosts</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../actions</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">connect</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-redux</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">bindActionCreators</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">redux</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">AppState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../actions/types</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">tubesdayApi</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../api</span><span class="dl">"</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">IProps</span> <span class="p">{</span>
  <span class="nl">onGetPosts</span><span class="p">:</span> <span class="k">typeof</span> <span class="nx">getPosts</span><span class="p">;</span>
  <span class="nl">children</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">ReactNode</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">List</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">FC</span><span class="o">&lt;</span><span class="nx">IProps</span><span class="o">&gt;</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">posts</span><span class="p">,</span> <span class="nx">setPosts</span><span class="p">]</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">useState</span><span class="p">();</span>

  <span class="nx">React</span><span class="p">.</span><span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">getPosts</span><span class="p">();</span>
  <span class="p">},</span> <span class="p">[]);</span>

  <span class="kd">const</span> <span class="nx">getPosts</span> <span class="o">=</span> <span class="k">async</span> <span class="p">():</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="k">void</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">tubesdayApi</span><span class="p">.</span><span class="nx">getAllPosts</span><span class="p">();</span>
      <span class="kd">const</span> <span class="nx">posts</span> <span class="o">=</span> <span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
      <span class="nx">props</span><span class="p">.</span><span class="nx">onGetPosts</span><span class="p">(</span><span class="nx">posts</span><span class="p">);</span>
      <span class="nx">setPosts</span><span class="p">(</span><span class="nx">posts</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Fetch Failed</span><span class="dl">'</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="kd">function</span> <span class="nx">renderVideoList</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">posts</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="na">item</span><span class="p">:</span> <span class="nx">ISimplePost</span><span class="p">,</span> <span class="na">idx</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nc">View</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nc">Text</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">title</span><span class="si">}</span><span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nc">Text</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">author</span><span class="si">}</span><span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nc">View</span><span class="p">&gt;</span>
      <span class="p">);</span>
    <span class="p">});</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">View</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">ScrollView</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">posts</span> <span class="p">?</span> <span class="nx">renderVideoList</span><span class="p">()</span> <span class="p">:</span> <span class="kc">null</span><span class="si">}</span><span class="p">&lt;/</span><span class="nc">ScrollView</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">View</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">mapStateToProps</span> <span class="o">=</span> <span class="p">(</span><span class="nx">state</span><span class="p">:</span> <span class="nx">AppState</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span> <span class="na">posts</span><span class="p">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">postList</span><span class="p">.</span><span class="nx">posts</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">mapDispatchToProps</span> <span class="o">=</span> <span class="p">(</span><span class="nx">dispatch</span><span class="p">:</span> <span class="kr">any</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span>
  <span class="na">onGetPosts</span><span class="p">:</span> <span class="nx">bindActionCreators</span><span class="p">(</span><span class="nx">getPosts</span><span class="p">,</span> <span class="nx">dispatch</span><span class="p">)</span>
<span class="p">});</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">connect</span><span class="p">(</span>
  <span class="nx">mapStateToProps</span><span class="p">,</span>
  <span class="nx">mapDispatchToProps</span>
<span class="p">)(</span><span class="nx">List</span><span class="p">);</span>
</code></pre></div></div>

<p>이제 위 코드를 조금 더 자세히 살펴보자.</p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">ISimplePost</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../shared-interfaces</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">getPosts</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../actions</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">connect</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-redux</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">bindActionCreators</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">redux</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">AppState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../actions/types</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<p>먼저 각 포스트의 인터페이스인 ISimplePost를 가져온다. posts를 map으로 순회하며 처리할 때 각각의 item을 지칭할 타입이다.</p>

<p>다음으로 앞서 만든 <strong>getPosts</strong> Action Creator를 가져온다. mapDispatchToProps 함수에서 dispatch와 getPosts를 바인드 해줄 것인데,
이로써 List 컴포넌트에서 해당 Action Creator를 이용해 스토어에 정보를 넣거나 가져올 수 있게 된다.</p>

<p>다음으로 connect를 가져온다. <strong>React 컴포넌트가 Redux의 흐름과 연결되기 위해서는 React Redux의 connect라는 함수를 사용해 연결해 줘야만 한다.</strong></p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="nx">connect</span><span class="p">(</span>
  <span class="nx">mapStateToProps</span><span class="p">,</span>
  <span class="nx">mapDispatchToProps</span>
<span class="p">)(</span><span class="nx">List</span><span class="p">);</span>
</code></pre></div></div>

<p>추후 이런식으로 List 컴포넌트를 Redux의 흐름과 연결할 것이다.</p>

<p><strong>bindActionCreators</strong>는 Action의 생성부터 Dispatch의 실행까지 한번에 이뤄질 수 있게 돕는 함수다.</p>

<p>마지막으로 mapStateToProps에서 state의 타입을 지정하기 위해 actions/type.ts에서 AppState라는 타입을 가져왔다.</p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">mapStateToProps</span> <span class="o">=</span> <span class="p">(</span><span class="nx">state</span><span class="p">:</span> <span class="nx">AppState</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span> <span class="na">posts</span><span class="p">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">postList</span><span class="p">.</span><span class="nx">posts</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">mapDispatchToProps</span> <span class="o">=</span> <span class="p">(</span><span class="nx">dispatch</span><span class="p">:</span> <span class="kr">any</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span>
  <span class="na">onGetPosts</span><span class="p">:</span> <span class="nx">bindActionCreators</span><span class="p">(</span><span class="nx">getPosts</span><span class="p">,</span> <span class="nx">dispatch</span><span class="p">)</span>
<span class="p">});</span>
</code></pre></div></div>

<p>다음으로 볼 부분은 이 두 함수이다. <strong>mapStateToProps는 Redux 스토어에 저장된 상태(state)를 props 형태로 React 컴포넌트에 전달한다.</strong> 이를 통해 <strong>컴포넌트 안에서 Redux 스토어의 데이터에 접근할 수 있게 된다.</strong></p>

<p><strong>mapDispatchToProps는 Action Creator를 props로 React 컴포넌트에 전달한다.</strong> 이를 통해서 <strong>Action을 생성하고 Redux 스토어에 저장된 데이터를 변경할 수 있게 된다.</strong></p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="nx">connect</span><span class="p">(</span>
  <span class="nx">mapStateToProps</span><span class="p">,</span>
  <span class="nx">mapDispatchToProps</span>
<span class="p">)(</span><span class="nx">List</span><span class="p">);</span>
</code></pre></div></div>

<p>이제 connect를 이용해서 컴포넌트와 Redux를 연결해 준다.</p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">IProps</span> <span class="p">{</span>
  <span class="nl">onGetPosts</span><span class="p">:</span> <span class="k">typeof</span> <span class="nx">getPosts</span><span class="p">;</span>
  <span class="nl">children</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">ReactNode</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">List</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">FC</span><span class="o">&lt;</span><span class="nx">IProps</span><span class="o">&gt;</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">posts</span><span class="p">,</span> <span class="nx">setPosts</span><span class="p">]</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">useState</span><span class="p">();</span>

  <span class="nx">React</span><span class="p">.</span><span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">getPosts</span><span class="p">();</span>
  <span class="p">},</span> <span class="p">[]);</span>

  <span class="kd">const</span> <span class="nx">getPosts</span> <span class="o">=</span> <span class="k">async</span> <span class="p">():</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="k">void</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">tubesdayApi</span><span class="p">.</span><span class="nx">getAllPosts</span><span class="p">();</span>
      <span class="kd">const</span> <span class="nx">posts</span> <span class="o">=</span> <span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
      <span class="nx">props</span><span class="p">.</span><span class="nx">onGetPosts</span><span class="p">(</span><span class="nx">posts</span><span class="p">);</span>
      <span class="nx">setPosts</span><span class="p">(</span><span class="nx">posts</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Fetch Failed</span><span class="dl">'</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p>다음으로 IProps라는 인터페이스를 선언한다. React.FC에 props의 형태에 대한 타입을 전달하기 위해서 사용한다.</p>

<p><code class="language-plaintext highlighter-rouge">const List: React.FC&lt;IProps&gt; = props =&gt; {</code>
이런 형태로 IProps를 제공해주면 된다.</p>

<p>React.useEffect나 React.useState에 관한 부분은 Hooks 관련된 자료를 참고하길 바란다.</p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">getPosts</span> <span class="o">=</span> <span class="k">async</span> <span class="p">():</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="k">void</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">tubesdayApi</span><span class="p">.</span><span class="nx">getAllPosts</span><span class="p">();</span>
      <span class="kd">const</span> <span class="nx">posts</span> <span class="o">=</span> <span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
      <span class="nx">props</span><span class="p">.</span><span class="nx">onGetPosts</span><span class="p">(</span><span class="nx">posts</span><span class="p">);</span>
      <span class="nx">setPosts</span><span class="p">(</span><span class="nx">posts</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Fetch Failed</span><span class="dl">'</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p>마지막으로 getPosts라는 함수를 만들었는데, API를 호출해 posts를 가져온다.
이후 props에 제공된 Action Creator 함수인 onGetPosts를 호출하여 Redux 스토어에 posts를 저장한다.</p>

<p>컴포넌트 안에서 <code class="language-plaintext highlighter-rouge">console.log(props)</code>를 해보면 posts가 추가된 것을 확인할 수 있을 것이다.</p>

<p id="7" />

<h2 id="8-참고자료">8. 참고자료</h2>

<ul>
  <li><a href="https://velog.io/@yesdoing/TypeScript-with-React-Redux-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-k5jsis62ah">yesdoing, “TypeScript with React + Redux 사용하기”</a></li>
  <li><a href="https://medium.com/@killerchip0/react-native-redux-typescript-guide-f251db03428f">Costas Ioannou, “React-Native + Redux + Typescript Guide”</a></li>
  <li><a href="https://yuddomack.tistory.com/entry/React-Native-Redux-Jest-Typescript-React-Navigation-%EB%A7%9B%EB%B3%B4%EA%B8%B0">오지고지리고알파고포켓몬고, “React Native + Redux + Jest + Typescript + React Navigation 맛보기”</a></li>
  <li><a href="https://medium.com/@ca3rot/%EC%95%84%EB%A7%88-%EC%9D%B4%EA%B2%8C-%EC%A0%9C%EC%9D%BC-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-%EC%89%AC%EC%9A%B8%EA%B1%B8%EC%9A%94-react-redux-%ED%94%8C%EB%A1%9C%EC%9A%B0%EC%9D%98-%EC%9D%B4%ED%95%B4-1585e911a0a6">carrot useless, “아마 이게 제일 이해하기 쉬울걸요? React + Redux 플로우의 이해”</a></li>
</ul>
:ET