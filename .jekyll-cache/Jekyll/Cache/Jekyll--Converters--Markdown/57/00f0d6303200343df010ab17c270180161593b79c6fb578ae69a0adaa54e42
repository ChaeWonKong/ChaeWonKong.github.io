I"KJ<p>외부 API가 호출되는 횟수에 비례해 과금하게 되는 경우, API의 호출을 최소화할 필요가 있죠.</p>

<p>예를 들어, 카카오나 네이버의 API를 활용해 input에 대해 자동완성을 구현하는 경우, 자모음 하나하나가 입력될 때마다 API 요청이 이루어진다면 이는 너무 큰 비효율일 겁니다.</p>

<p>이런 경우, <strong>Lodash의 debounce라는 메서드</strong>를 이용하여 특정 시간 동안 발생된 이벤트를 묶어 가장 마지막 이벤트에 대해서만 API 요청을 진행함으로써 해결할 수 있습니다.</p>

<p>오늘은 이런 <strong>debounce 함수를 직접 작성</strong>해 봄으로써, 어떻게 동작하는지 한번 제대로 알아보려고 합니다.</p>

<p>매번 외부 라이브러리에서 갖다 쓰기만 하니까, 정작 생각하는 능력은 성장하지 않는 것 같다고 생각해서요.</p>

<h2 id="lodash의-debounce-부터-살펴보기">Lodash의 Debounce 부터 살펴보기</h2>

<p>먼저 Lodash의 debounce 부터 간단히 살펴보고 넘어가죠.</p>

<p>Lodash는 JavaScript 개발자라면 한번 이상은 사용해 봤을 것입니다.
JavaScript 개발자를 위한 유틸리티 라이브러리죠. 딥카피(deep copy)와 같이 배열이나 객체를 처리할 수 있는 다양한 메서드를 지원합니다.</p>

<p><a href="https://lodash.com/docs/4.17.15#debounce">Lodash - Debounce 링크</a></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">_</span><span class="p">.</span><span class="nx">debounce</span><span class="p">(</span><span class="nx">func</span><span class="p">,</span> <span class="p">[(</span><span class="nx">wait</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)],</span> <span class="p">[(</span><span class="nx">options</span> <span class="o">=</span> <span class="p">{})]);</span>
</code></pre></div></div>

<p>보통 Lodash는 <code class="language-plaintext highlighter-rouge">_</code>로 가져와 사용합니다.</p>

<p>Lodash의 debounce는 leading, trailing을 options으로 받습니다.
만약 defualt는 <code class="language-plaintext highlighter-rouge">trailing = true</code> 입니다.</p>

<p><code class="language-plaintext highlighter-rouge">_.debounce</code>는 <code class="language-plaintext highlighter-rouge">_.throttle</code>과 다르게 주어진 매 밀리세컨드 마다 실행되는 것이 아니라, 주어진 밀리세컨드 이내에 연속으로 이벤트가 발생할 경우, 더 이상 이벤트가 발생하지 않을 때까지 일단 대기합니다.</p>

<p>마지막 이벤트가 끝난 시점을 기준으로 주어진 밀리세컨드 이후 콜백으로 주어진 함수가 실행됩니다.</p>

<p>이벤트가 꾸준히 발생할 때, 주어진 인터벌마다 주기적으로 이벤트가 발생하게 하고 싶다면 <code class="language-plaintext highlighter-rouge">_.throttle</code>을 사용하면 됩니다.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">leading = true</code> 이면 첫 이벤트 발생시 그 이벤트는 일단 반영됩니다. 이후의 연속하는 이벤트는 묶어서 처리됩니다.</li>
  <li><code class="language-plaintext highlighter-rouge">trailing = true</code> 이면 연속된 이벤트의 마지막 이벤트가 발생 후 wait으로 대입된 밀리세컨트 만큼이 지난 후 마지막 이벤트 하나가 반영됩니다.</li>
</ul>

<h2 id="javascript로-debounce-구현하기">JavaScript로 Debounce 구현하기</h2>

<p>먼저 leading 옵션이 없는 Debounce 함수부터 살펴볼게요.</p>

<h3 id="간단한-버전">간단한 버전</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">debounce</span><span class="p">(</span><span class="nx">func</span><span class="p">,</span> <span class="nx">wait</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">inDebounce</span><span class="p">;</span>
  <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">context</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">;</span>

    <span class="c1">// setTimeout이 실행된 Timeout의 ID를 반환하고, clearTimeout()으로 이를 해제할 수 있음을 이용</span>
    <span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">inDebounce</span><span class="p">);</span>
    <span class="nx">inDebounce</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">func</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">),</span> <span class="nx">wait</span><span class="p">);</span>
  <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>

<p>네. <strong>클로저</strong>를 사용해 사이드이팩트인 timeout을 관리하는 구조입니다.
클로저는 <strong>스코프체인</strong> 상의 변수들에 접근할 수 있죠.</p>

<p>이벤트가 주어진 <code class="language-plaintext highlighter-rouge">wait</code> 보다 짧은 간격으로 지속해 발생하면 timeout이 계속 더 뒤의 이벤트의 발생시점을 기점으로 갱신됩니다.</p>

<h3 id="leading-옵션-추가">leading 옵션 추가</h3>

<p>이제 우리가 만들 debounce 함수는 leading만을 Boolean 값으로 받아 처리합니다.
<code class="language-plaintext highlighter-rouge">leading = true</code> 라면 매 이벤트 그룹의 첫 이벤트부터 반영되는 구조죠.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">debounce</span> <span class="o">=</span> <span class="p">(</span><span class="nx">func</span><span class="p">,</span> <span class="nx">wait</span><span class="p">,</span> <span class="nx">leading</span> <span class="o">=</span> <span class="kc">false</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">inDebounce</span><span class="p">;</span>
  <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">context</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">;</span>

    <span class="c1">// inDebounce 값이 변하기 전에 미리 저장하기 위해 사용</span>
    <span class="kd">let</span> <span class="nx">callNow</span> <span class="o">=</span> <span class="nx">leading</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">inDebounce</span><span class="p">;</span>

    <span class="c1">// leading이 아닌 경우에만 wait 이후 func가 실행되도록 함</span>
    <span class="kd">const</span> <span class="nx">later</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">inDebounce</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">leading</span><span class="p">)</span> <span class="nx">func</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
    <span class="p">};</span>

    <span class="c1">// setTimeout이 실행된 Timeout의 ID를 반환하고, clearTimeout()으로 이를 해제할 수 있음을 이용</span>
    <span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">inDebounce</span><span class="p">);</span>
    <span class="nx">inDebounce</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">later</span><span class="p">,</span> <span class="nx">wait</span><span class="p">);</span>

    <span class="c1">// 만약 leading=true이고 inDebounce가 없으면 func를 실행</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">callNow</span><span class="p">)</span> <span class="nx">func</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
  <span class="p">};</span>
<span class="p">};</span>
</code></pre></div></div>

<p>구조가 제법 복잡해 졌습니다.
이제는 leading 옵션도 추가되었죠.</p>

<p>클로저를 사용하는 구조는 전과 동일합니다.
다만 <code class="language-plaintext highlighter-rouge">callNow</code>라는 변수와 <code class="language-plaintext highlighter-rouge">later()</code> 함수가 추가 되었습니다.</p>

<p>우선 <code class="language-plaintext highlighter-rouge">leading = true</code> 이면서 <code class="language-plaintext highlighter-rouge">inDebounce</code> 값이 정의되지 않은 경우,
<code class="language-plaintext highlighter-rouge">if (callNow) func.apply(context, args);</code> 문에 의해 debounce 함수가 호출될 때 즉시 우리의 <code class="language-plaintext highlighter-rouge">func</code>는 호출됩니다.</p>

<p>하지만, 이 과정에서 <code class="language-plaintext highlighter-rouge">inDebounce</code>에는 <code class="language-plaintext highlighter-rouge">setTimeout(later, wait)</code>의 결과로 timeout의 ID 값이 담기죠.
그래서 <code class="language-plaintext highlighter-rouge">wait</code> 이라는 인터벌 내에 동일 이벤트가 반복되면 <code class="language-plaintext highlighter-rouge">callNow = false</code>가 되어 우리가 위에서 작성한 간단한 버전의 debounce 함수처럼 작동하게 됩니다.</p>

<p>그럼 <code class="language-plaintext highlighter-rouge">inDebounce = null;</code> 이 부분은 왜 추가했을까요?</p>

<p>살펴보면 later가 호출되는 setTimeout보다 위에서 <code class="language-plaintext highlighter-rouge">clearTimeout(inDebounce);</code>로 timeout을 없애고 있죠.
따라서 <code class="language-plaintext highlighter-rouge">later()</code>가 호출되면 <code class="language-plaintext highlighter-rouge">inDebounce != null</code> 입니다.</p>

<p>그렇게 된다면, <code class="language-plaintext highlighter-rouge">wait</code> 이후아 이벤트가 발생하더라도 leading 이벤트가 반영되지 않게 되죠.
그래서 굳이 <code class="language-plaintext highlighter-rouge">inDebounce = null;</code>을 통해 <code class="language-plaintext highlighter-rouge">inDebounce</code>를 초기화 해 주는 것입니다!</p>

<h2 id="간단하게-테스트-해보기">간단하게 테스트 해보기</h2>

<p>브라우저에서 버튼을 클릭하면 debounce로 버튼 클릭 이벤트를 받는 간단한 예제를 만들어 봤습니다.</p>

<p><strong>index.html</strong></p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"X-UA-Compatible"</span> <span class="na">content=</span><span class="s">"ie=edge"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;title&gt;</span>Document<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">"button"</span><span class="nt">&gt;</span>Click Me!<span class="nt">&lt;/button&gt;</span>
    <span class="nt">&lt;p&gt;</span>total counts: <span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">"count"</span><span class="nt">&gt;&lt;/span&gt;&lt;/p&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"index.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>addEventListener에 콜백으로 제공된 debounce 함수의 wait 부분의 숫자(밀리세컨드 단위)와 leading 옵션을 바꿔가며 테스트 해 보세요!</p>

<p><strong>index.js</strong></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">debounce</span> <span class="o">=</span> <span class="p">(</span><span class="nx">func</span><span class="p">,</span> <span class="nx">wait</span><span class="p">,</span> <span class="nx">leading</span> <span class="o">=</span> <span class="kc">false</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">inDebounce</span><span class="p">;</span>
  <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">context</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">;</span>

    <span class="c1">// inDebounce 값이 변하기 전에 미리 저장하기 위해 사용</span>
    <span class="kd">let</span> <span class="nx">callNow</span> <span class="o">=</span> <span class="nx">leading</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">inDebounce</span><span class="p">;</span>

    <span class="c1">// leading이 아닌 경우에만 wait 이후 func가 실행되도록 함</span>
    <span class="kd">const</span> <span class="nx">later</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">inDebounce</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">leading</span><span class="p">)</span> <span class="nx">func</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
    <span class="p">};</span>

    <span class="c1">// setTimeout이 실행된 Timeout의 ID를 반환하고, clearTimeout()으로 이를 해제할 수 있음을 이용</span>
    <span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">inDebounce</span><span class="p">);</span>
    <span class="nx">inDebounce</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">later</span><span class="p">,</span> <span class="nx">wait</span><span class="p">);</span>

    <span class="c1">// 만약 leading=true이고 inDebounce가 없으면 func를 실행</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">callNow</span><span class="p">)</span> <span class="nx">func</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
  <span class="p">};</span>
<span class="p">};</span>

<span class="kd">let</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">button</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">button</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">let</span> <span class="nx">counter</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">count</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">counter</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="nx">count</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">handleClick</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">count</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="nx">counter</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="nx">count</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">button</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="nx">debounce</span><span class="p">(</span><span class="nx">handleClick</span><span class="p">,</span> <span class="mi">500</span><span class="p">,</span> <span class="kc">true</span><span class="p">));</span>
</code></pre></div></div>

<h2 id="참고-자료">참고 자료</h2>

<ul>
  <li><a href="https://css-tricks.com/debouncing-throttling-explained-examples/">David Corbacho, “Debouncing and Throttling Explained Through Examples”</a></li>
  <li><a href="https://codeburst.io/throttling-and-debouncing-in-javascript-b01cad5c8edf">Jhey Tompkins, “Throttling and Debouncing in JavaScript”</a></li>
  <li><a href="https://velog.io/@yhe228/Debounce">yhe228, “Debounce”(한글자료)</a></li>
  <li><a href="https://davidwalsh.name/javascript-debounce-function">David Walsh, “JavaScript Debounce Function”</a></li>
</ul>
:ET