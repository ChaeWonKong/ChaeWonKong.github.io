I"B<p>Usually we modify states to update and re-render a component. It satisfies us mostly. But sometimes, we have to re-render the component manually.</p>

<p>Long long time ago, there were class-based components and they had something called forceUpdate. When you call forceUpdate function, it manually updated the component and make it to re-render.</p>

<p>Nowadays, almost nobody uses class-based components, and functional components and hooks dominates all over the world. We have magnificent hooks like useState, useEffect, useRef, useReducers, and so on. However, we no more have something simillar to forceUpdate.</p>

<h2 id="tldr">TL;DR</h2>
<p>You can use <code class="language-plaintext highlighter-rouge">useReducer</code> to create your own forceUpdate.</p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">[,</span> <span class="nx">forceUpdate</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useReducer</span><span class="p">(</span><span class="nx">x</span> <span class="o">=&gt;</span> <span class="nx">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>

<span class="kd">function</span> <span class="nx">handleClick</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">forceUpdate</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Thatâ€™s all you need. I intentionally omitted the first element of the array, since we donâ€™t need the value generated by useReducer.</p>

<h2 id="how-it-works">How it works</h2>
<p>From the hookâ€™s name, you may got the meaning of it. Yeah, yeah, <code class="language-plaintext highlighter-rouge">reducer</code>.</p>

<p><a href="https://reactjs.org/docs/hooks-reference.html#usereducer">useReducer</a></p>
<blockquote>
  <p>An alternative to useState. Accepts a reducer of type (state, action) =&gt; newState, and returns the current state paired with a dispatch method.</p>
</blockquote>

<p>Whenever <code class="language-plaintext highlighter-rouge">forceUpdate</code> has been called, the <code class="language-plaintext highlighter-rouge">useReducer</code> hook increments the value by 1.</p>

<p>Itâ€™s somehow simmilar to code below:</p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">[</span><span class="nx">state</span><span class="p">,</span> <span class="nx">setState</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">forceUpdate</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">setState</span><span class="p">(</span><span class="nx">state</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="advanced">Advanced</h2>
<p>How to update the component by force whenever resize event has captured?</p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useReducer</span><span class="p">,</span> <span class="nx">useLayoutEffect</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">ResizableComponent</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[,</span> <span class="nx">forceUpdate</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useReducer</span><span class="p">(</span><span class="nx">x</span> <span class="o">=&gt;</span> <span class="nx">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>

  <span class="nx">useLayoutEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">resize</span><span class="dl">'</span><span class="p">,</span> <span class="nx">forceUpdate</span><span class="p">);</span>

    <span class="k">return</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">window</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">resize</span><span class="dl">'</span><span class="p">,</span> <span class="nx">forceUpdate</span><span class="p">);</span>
  <span class="p">},</span> <span class="p">[]);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>First, I used <code class="language-plaintext highlighter-rouge">useLayoutEffect</code> hook from React, which is pretty much about the same as <code class="language-plaintext highlighter-rouge">useEffect</code>, but the followings are different:</p>

<blockquote>
  <p>The signature is identical to useEffect, but it fires synchronously after all DOM mutations. Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside useLayoutEffect will be flushed synchronously, before the browser has a chance to paint.</p>
</blockquote>

<p>Then, I created a event-listener to capture resize event.
<code class="language-plaintext highlighter-rouge">window.addEventListener('resize', forceUpdate);</code></p>

<p>Finally I set <code class="language-plaintext highlighter-rouge">useLayoutEffect</code> to return a function, to clean-up event-listener.</p>

<p>From the <a href="https://reactjs.org/docs/hooks-reference.html#uselayouteffect">guide</a>:</p>
<blockquote>
  <p>Often, effects create resources that need to be cleaned up before the component leaves the screen, such as a subscription or timer ID. To do this, the function passed to useEffect may return a clean-up function.</p>
</blockquote>

<h2 id="conclusion">Conclusion</h2>
<p>By using <code class="language-plaintext highlighter-rouge">useReducer</code>, it is easy to implement <code class="language-plaintext highlighter-rouge">forceUpdate</code> in functional component.
Yet, it is not quite recommended to use <code class="language-plaintext highlighter-rouge">forceUpdate</code> in React world, so, use it carefully and wisely.</p>

<h2 id="reference">Reference</h2>
<ul>
  <li><a href="https://reactjs.org/docs/hooks-faq.html#is-there-something-like-forceupdate">Is there something like forceUpdate?(reactjs.org)</a></li>
</ul>
:ET