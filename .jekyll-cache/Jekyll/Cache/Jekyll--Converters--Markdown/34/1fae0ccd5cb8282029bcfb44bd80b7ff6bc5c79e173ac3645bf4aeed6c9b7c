I"tg<blockquote>
  <p>다음은 Medium  <a href="https://medium.com/better-programming/11-extremely-useful-javascript-tips-4484429a5655">“11 Extremely Useful JavaScript Tips”</a> 을 번역한 글이다.</p>
</blockquote>

<p><img src="https://miro.medium.com/max/5059/1*5YinhYlaDbUtS1Y33yV4yg.jpeg" alt="Image by David Monjefrom Unsplash" />
Image by <a href="https://unsplash.com/@davidmonje?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">David Monje</a> from Unsplash</p>

<h2 id="1--연산자를-사용해-불리언-값으로-바꾸기">1. !! 연산자를 사용해 불리언 값으로 바꾸기</h2>

<p>종종 우리는 어떤 변수가 존재하거나 유효한 값을 가지는지를 참/거짓 여부로 판별해야 할 때가 있다. <code class="language-plaintext highlighter-rouge">!!</code>(이중부정 연산자)를 이용해 이런 검증을 할 수 있다.</p>

<p><strong>간단히 <code class="language-plaintext highlighter-rouge">!!variable</code> 이라는 형태로 표현하는 것 만으로도 어떤 형태의 데이터도 불리언 값으로 변화시킬 수 있고, <code class="language-plaintext highlighter-rouge">0</code>, <code class="language-plaintext highlighter-rouge">null</code>, <code class="language-plaintext highlighter-rouge">""</code>, <code class="language-plaintext highlighter-rouge">undefined</code>, <code class="language-plaintext highlighter-rouge">NaN</code> 등의 경우엔 <code class="language-plaintext highlighter-rouge">false</code> 를, 이외의 경우엔 <code class="language-plaintext highlighter-rouge">true</code> 를 반환하게 할 수 있다.</strong></p>

<p>아래 예제를 보며 사례를 통해 이해해보자.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">Account</span><span class="p">(</span><span class="nx">cash</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">cash</span> <span class="o">=</span> <span class="nx">cash</span><span class="p">;</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">hasMoney</span> <span class="o">=</span> <span class="o">!!</span><span class="nx">cach</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">account</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Account</span><span class="p">(</span><span class="mf">100.50</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">account</span><span class="p">.</span><span class="nx">cash</span><span class="p">);</span> <span class="c1">// 100.50</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">account</span><span class="p">.</span><span class="nx">hasMoney</span><span class="p">);</span> <span class="c1">// true</span>

<span class="kd">var</span> <span class="nx">emptyAccount</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Account</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">emptyAccount</span><span class="p">.</span><span class="nx">cash</span><span class="p">);</span> <span class="c1">// 0</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">emptyAccount</span><span class="p">.</span><span class="nx">hasMoney</span><span class="p">);</span> <span class="c1">// false</span>
</code></pre></div></div>

<p>이 경우, <code class="language-plaintext highlighter-rouge">account.cash</code>가 0이 아니라면 <code class="language-plaintext highlighter-rouge">account.hasMoney</code>는 <code class="language-plaintext highlighter-rouge">true</code> 가  된다.</p>

<h2 id="2--연산자를-이용해-number-타입으로-바꾸기">2. + 연산자를 이용해 Number 타입으로 바꾸기</h2>

<p>이 방법은 마법같다! 매우 간단하지만 문자열 숫자에서만 사용 가능하고, 숫자로된 문자 또는 문자열이 아닐 경우엔 <code class="language-plaintext highlighter-rouge">NaN</code> 이 리턴된다. 예제를 살펴보자.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">toNumber</span><span class="p">(</span><span class="nx">strNumber</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="o">+</span><span class="nx">strNumber</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">toNumber</span><span class="p">(</span><span class="dl">"</span><span class="s2">1234</span><span class="dl">"</span><span class="p">));</span> <span class="c1">// 1234</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">toNumber</span><span class="p">(</span><span class="dl">"</span><span class="s2">ACB</span><span class="dl">"</span><span class="p">));</span> <span class="c1">// NaN</span>

<span class="c1">// 이 마법은 Date 클래스와도 작동하고, 이 경우엔 Number 타입의 타임스탬프를 반환한다.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">+</span><span class="k">new</span> <span class="nb">Date</span><span class="p">())</span> <span class="c1">// 1461288164385</span>
</code></pre></div></div>

<h2 id="3-단락형-조건문">3. 단락형 조건문</h2>

<p>만약 다음과 같은 코드는</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="nx">connected</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">login</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>(검증하고자 하는) 변수와 함수 사이에  <code class="language-plaintext highlighter-rouge">&amp;&amp;</code>(AND 연산자)를 사용함으로써 짧게 축약할 수 있다.</p>

<p>예를 들어, 위의 코드는 아래처럼 한 줄로 줄여 쓸 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">connected</span> <span class="o">&amp;&amp;</span> <span class="nx">login</span><span class="p">();</span>
</code></pre></div></div>

<p>마찬가지로 어떤 요소(Attribute)나 함수가 특정 객체(Object) 내에 존재하는지도 확인할 수 있다.</p>

<p>아래 코드처럼 말이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">user</span> <span class="o">&amp;&amp;</span> <span class="nx">user</span><span class="p">.</span><span class="nx">login</span><span class="p">();</span>
</code></pre></div></div>

<h2 id="4--연산자를-이용한-디폴트-값">4. || 연산자를 이용한 디폴트 값</h2>

<p>오늘 날 ES6는 디폴트 전달인자(Default Argument)라는 기능을 제공한다. 이와 유사한 기능을 예전 버전의 브라우저에서 지원하기 위해 <code class="language-plaintext highlighter-rouge">||</code> (OR 연산자)를 이용해 디폴트 값을 두번째 매개변수로 제공할 수 있다.</p>

<p>만약 첫 번째 매개변수(전달인자, Parameter)가 <code class="language-plaintext highlighter-rouge">false</code> 값을 가진다면, 두 번째 매개변수가 디폴트 값으로 사용되게 된다.</p>

<p>예제를 살펴보자.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">User</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span> <span class="o">||</span> <span class="dl">"</span><span class="s2">Oliver Queen</span><span class="dl">"</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span> <span class="o">||</span> <span class="mi">27</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">user1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">User</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">user1</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// Oliver Queen</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">user1</span><span class="p">.</span><span class="nx">age</span><span class="p">);</span> <span class="c1">// 27</span>

<span class="kd">var</span> <span class="nx">user2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">User</span><span class="p">(</span><span class="dl">"</span><span class="s2">Barry Allen</span><span class="dl">"</span><span class="p">,</span> <span class="mi">25</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">user2</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// Barry Allen</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">user2</span><span class="p">.</span><span class="nx">age</span><span class="p">);</span> <span class="c1">// 25</span>
</code></pre></div></div>

<h2 id="5-arraylength-를-루프-내에-캐싱하기">5. <code class="language-plaintext highlighter-rouge">array.length</code> 를 루프 내에 캐싱하기</h2>

<p>이 팁은 매우 단순함에도 큰 배열을 루프 문으로 처리할 때 엄청나게 큰 성능 차이를 가져온다. 기본적으로 배열을 순회할 때, 대부분은 아래와 같이 코드를 작성한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">array</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>만약 작은 배열을 처리한다면 상관 없지만, 큰 배열을 처리할 때는 이런 형태의 코드는 매 루프 시작시 마다 배열의 크기를 계산하여 지연을 발생시킨다.</p>

<p>이러한 경우에  <code class="language-plaintext highlighter-rouge">array.length</code> 를 변수에 할당해 캐싱하여, 매 루프 진입 시점마다  <code class="language-plaintext highlighter-rouge">array.length</code> 를 계산하는 것을 피할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">length</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
<span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>더 간단하게는 다음처럼 작성하면 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">length</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="6-배열에서-마지막-아이템에-접근하기">6. 배열에서 마지막 아이템에 접근하기</h2>

<p><code class="language-plaintext highlighter-rouge">Array.prototype.slice(begin, end)</code> 는 배열의 시작 아이템과 끝 아이템을 잘라오는 기능을 가지지만, 끝 아이템을 명시하지 않으면 이 매서드는 자동으로 가능한 가장 긴 형태의 배열을 반환한다.</p>

<p>내 생각에 대부분의 사람들은 이 매서드가 음수도 받을 수 있고, 음수를 통해 배열의 뒤쪽부터 접근할 수 있다는 사실을 모르는 것 같다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">];</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">));</span> <span class="c1">// [6]</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">));</span> <span class="c1">// [5,6]</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">));</span> <span class="c1">// [4,5,6]</span>
</code></pre></div></div>

<h2 id="7-배열-크기-축소하기truncating">7. 배열 크기 축소하기(Truncating)</h2>

<p>이 테크닉은 배열의 사이즈를 제한하는 데, 배열의 크기를 기준으로 다른 배열의 엘리먼트들을 제거하고 싶은 경우에 매우 효과적이다.</p>

<p>예를 들어, 만약 10개의 엘리먼트가 있는 배열을 가지고 있지만, 5개의 엘리먼트만 남기고 싶을 때, <code class="language-plaintext highlighter-rouge">array.length = 5</code> 로 설정하여 그 배열의 크기를 작게 줄일 수 있다. 예제를 보자.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">];</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span> <span class="c1">// 6</span>
<span class="nx">array</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span> <span class="c1">// 3</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">);</span> <span class="c1">// [1,2,3]</span>
</code></pre></div></div>

<h2 id="8-전부-치환하기">8. 전부 치환하기</h2>

<p><code class="language-plaintext highlighter-rouge">String.replace()</code> 메서드는 문자열과 정규표현식을 활용해 문자열을 치환할 수 있게 한다. 기본적으로는 처음으로 발견되는 문자열이 치환된다. 하지만, <code class="language-plaintext highlighter-rouge">/g</code> 를 정규표현식 끝에 추가하면 <code class="language-plaintext highlighter-rouge">replaceAll()</code> 과 같은 효과를 만들어낼 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">string</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">john john</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/hn/</span><span class="p">,</span> <span class="dl">"</span><span class="s2">ana</span><span class="dl">"</span><span class="p">));</span> <span class="c1">// "joana john"</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/hn/g</span><span class="p">,</span> <span class="dl">"</span><span class="s2">ana</span><span class="dl">"</span><span class="p">));</span> <span class="c1">// "joana joana"</span>
</code></pre></div></div>

<h2 id="9-노드리스트를-배열로-전환하기">9. 노드리스트를 배열로 전환하기</h2>

<p>만약  <code class="language-plaintext highlighter-rouge">document.querySelectorAll("p")</code> 를 실행한다면 DOM 엘리먼트의 배열을 <code class="language-plaintext highlighter-rouge">노드리스트(NodeList)</code> 라는 객체로 리턴할 것이다. 하지만, 이 객체에서는 <code class="language-plaintext highlighter-rouge">sort()</code>, <code class="language-plaintext highlighter-rouge">reduce()</code>, <code class="language-plaintext highlighter-rouge">map()</code>, <code class="language-plaintext highlighter-rouge">filter()</code> 등 일반적인 배열에서 사용 가능한 매서드들의 상당수가 사용 불가능하다.</p>

<p>이러한 배열의 여러 메서드들이 기능하게 하기 위해서는 <code class="language-plaintext highlighter-rouge">노드리스트</code> 를 <code class="language-plaintext highlighter-rouge">배열</code> 로 변환해야 한다. 단지 <code class="language-plaintext highlighter-rouge">[].slice.call(elements)</code> 를 실행하는 것이면 충분하다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="dl">"</span><span class="s2">p</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// 노드리스트</span>
<span class="kd">var</span> <span class="nx">arrayElements</span> <span class="o">=</span> <span class="p">[].</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">elements</span><span class="p">);</span> <span class="c1">// 이제 노드리스트는 배열로 변환됨</span>

<span class="c1">// 노드리스트를 배열인 변수로 변환하는 또 다른 방법</span>
<span class="nx">arrayElements</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nx">elements</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="10-배열을-병합하기">10. 배열을 병합하기</h2>

<p>배열을 병합할 때, <code class="language-plaintext highlighter-rouge">Array.concat()</code> 을 사용한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">array1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">array2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">];</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array1</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">array2</span><span class="p">));</span> <span class="c1">// [1,2,3,4,5,6];</span>
</code></pre></div></div>

<p>하지만 이 방법은 크기가 큰 배열을 병합할 경우, 새 배열을 생성하는 과정에서 많은 메모리 낭비가 발생하여 적합하지 않다.</p>

<p>이런 경우, <code class="language-plaintext highlighter-rouge">Array.push.apply(arr1, arr2)</code> 로 새 배열을 생성할 수 있다. 이 방법은 두 번째 배열을 첫 번째 배열로 병합하여 메모리 사용량을 절감한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">array1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">array2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">];</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array1</span><span class="p">.</span><span class="nx">push</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">array1</span><span class="p">,</span> <span class="nx">array2</span><span class="p">));</span> <span class="c1">// [1,2,3,4,5,6];</span>
</code></pre></div></div>

<h2 id="11-배열의-엘리먼트-뒤섞기">11. 배열의 엘리먼트 뒤섞기</h2>

<p><u>Lodash</u>(로다쉬) 같 외부 라이브러리에 의존하지 않고 배열의 엘리먼트를 뒤섞고 싶다면, 다음처럼 마술을 부려보자.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">];</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">list</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">-</span> <span class="mf">0.5</span> <span class="p">}));</span> <span class="c1">// [2,1,3]</span>
</code></pre></div></div>

<p>Resource : <a href="https://github.com/maketroli/js-hacks/blob/master/README.md">JavaScript Tips</a></p>

<p>Follow <a href="https://medium.com/u/f9ffc26e7e69?source=post_page-----4484429a5655----------------------">Javascript Jeep🚙💨</a></p>

<p>https://sitepoint.tapfiliate.com/p/payout-methods/new/</p>

<h2 id="출처">출처</h2>

<ul>
  <li>영어 원문: <a href="https://medium.com/better-programming/11-extremely-useful-javascript-tips-4484429a5655">“11 Extremely Useful JavaScript Tips”, by Javascript Jeep</a></li>
</ul>
:ET