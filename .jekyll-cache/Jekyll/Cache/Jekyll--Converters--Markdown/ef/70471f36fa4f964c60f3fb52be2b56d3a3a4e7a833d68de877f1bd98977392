I"Ú'<h2 id="installation">Installation</h2>

<p>You must install TypeScript globally.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm <span class="nb">install</span> <span class="nt">-g</span> typescript
</code></pre></div></div>

<p>If you got an permission error, try <code class="language-plaintext highlighter-rouge">sudo</code> prefix.</p>

<h2 id="project-initialization">Project Initialization</h2>

<p>Now, let‚Äôs create an npm project.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">mkdir </span>ts-node-server
<span class="nv">$ </span><span class="nb">cd </span>ts-node-server
<span class="nv">$ </span>npm init <span class="nt">-y</span>
</code></pre></div></div>

<p>This will create <code class="language-plaintext highlighter-rouge">package.json</code> and other setting files.</p>

<p>Then run,</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$tsc</span> <span class="nt">--init</span>
</code></pre></div></div>

<p>to create TypeScript environment.
<code class="language-plaintext highlighter-rouge">tsconfig.json</code> file will be initialized then, and you can configure settings for TypeScript.</p>

<h2 id="express">Express</h2>

<p>Now is the time to create express app.</p>

<p>First, we need to install <code class="language-plaintext highlighter-rouge">@types/express</code>.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm i @types/express
</code></pre></div></div>

<p>Create <code class="language-plaintext highlighter-rouge">index.ts</code> file to store code for your server, and type the code below.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">express</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">;</span>

<span class="kr">declare</span> <span class="nb">global</span> <span class="p">{</span>
  <span class="k">namespace</span> <span class="nx">NodeJS</span> <span class="p">{</span>
    <span class="kr">interface</span> <span class="nx">ProcessEnv</span> <span class="p">{</span>
      <span class="nl">NODE_ENV</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
      <span class="nl">PORT</span><span class="p">?:</span> <span class="kr">string</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nx">App</span> <span class="p">{</span>
  <span class="k">public</span> <span class="nx">application</span><span class="p">:</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Application</span><span class="p">;</span>
  <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">application</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">App</span><span class="p">().</span><span class="nx">application</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">PORT</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">4000</span><span class="p">;</span>

<span class="c1">// show "Successfully started" on browser when you visit localhost:4000</span>
<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">:</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">res</span><span class="p">:</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">"</span><span class="s2">Successfully started</span><span class="dl">"</span><span class="p">);</span>
<span class="p">});</span>

<span class="c1">// show "Server is Running at &gt;&gt;&gt; localhost:4000" on your terminal.</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">PORT</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Server is Running at &gt;&gt;&gt; localhost:</span><span class="p">${</span><span class="nx">PORT</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
<span class="p">);</span>
</code></pre></div></div>

<p>you may import express like <code class="language-plaintext highlighter-rouge">import * as express from "express"</code>, if you got an error from module imports.</p>

<p>We use <code class="language-plaintext highlighter-rouge">process.env.PORT</code> as a port if it exists, else use 4000.
In order to use this method, we need to declare namespace and interface globally by using <code class="language-plaintext highlighter-rouge">declare global</code> code block.</p>

<p>Then we created <code class="language-plaintext highlighter-rouge">App</code> class to generate express app.</p>

<h2 id="run">Run</h2>

<p>In order to watch updates in your code while running the server, we need to use <code class="language-plaintext highlighter-rouge">nodemon</code>.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm i <span class="nt">-D</span> nodemon ts-node
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">-D</code> flag implies the followed modules would be added to <code class="language-plaintext highlighter-rouge">devDependencies</code>.</p>

<p>Almost done. Add <code class="language-plaintext highlighter-rouge">start</code> script to <code class="language-plaintext highlighter-rouge">package.json</code>.</p>

<p>Your <code class="language-plaintext highlighter-rouge">package.json</code> would like:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"server"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0.0"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
  </span><span class="nl">"main"</span><span class="p">:</span><span class="w"> </span><span class="s2">"index.js"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"test"</span><span class="p">:</span><span class="w"> </span><span class="s2">"echo </span><span class="se">\"</span><span class="s2">Error: no test specified</span><span class="se">\"</span><span class="s2"> &amp;&amp; exit 1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"nodemon index.ts"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"author"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
  </span><span class="nl">"license"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ISC"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"devDependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"nodemon"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^2.0.2"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"ts-node"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^8.6.2"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"dependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"@types/express"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^4.17.2"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Finally, it‚Äôs time to run your server.</p>

<p>Type <code class="language-plaintext highlighter-rouge">npm run start</code>, and go to ‚Äúhttp://localhost:4000‚Äù.</p>

<p>You will see ‚ÄúSuccessfully started‚Äù, then you made it!</p>

<h2 id="reference">Reference</h2>

<ul>
  <li><a href="https://stackoverflow.com/questions/45194598/using-process-env-in-typescript/45195359">StackOverflow, ‚Äúusing process.env in TypeScript‚Äù</a></li>
  <li><a href="https://dev.to/aligoren/developing-an-express-application-using-typescript-3b1">Ali GOREN, ‚ÄúDeveloping an Express Application Using TypeScrip‚Äù</a></li>
</ul>
:ET