I"˝5<h2 id="table-of-contents">Table of Contents</h2>
<ul>
  <li>Unexpected results</li>
  <li>How JS Sort Method Works</li>
  <li>compareFunction Parameter</li>
  <li>Compared with Python Sort Method</li>
</ul>

<h3 id="unexpected-results">Unexpected results</h3>
<p>Fortunately, JavaScript offers sort method for arrays. You can search it from MDN in the name of ‚ÄúArray.prototype.sort()‚Äù. Despite it‚Äôs convienence, it frequently yields unexpected results compared to Python‚Äôs sort method.</p>

<p>First, let‚Äôs just compare sorted results from both Python and JS.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Python
</span><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">99</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
<span class="n">a</span><span class="p">.</span><span class="n">sort</span><span class="p">()</span>
<span class="c1"># l = [1, 2, 3, 7, 10, 99]
</span></code></pre></div></div>

<p>Easy to understand. Loud and Clear. But, how about in JS?</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// JavaScript</span>
<span class="nx">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">99</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
<span class="nx">a</span><span class="p">.</span><span class="nx">sort</span><span class="p">()</span>
<span class="c1">// a = [ 1, 10, 2, 3, 7, 99 ]</span>
</code></pre></div></div>

<p>What? It aint got sorted, or is it?
Let‚Äôs see some more ex.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Python
</span><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="s">'a'</span><span class="p">,</span> <span class="s">'10'</span><span class="p">,</span> <span class="mi">99</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>  
<span class="n">a</span><span class="p">.</span><span class="n">sort</span><span class="p">()</span>

<span class="c1"># TypeError: '&lt;' not supported between instances of 'str' and 'int'
</span></code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// JavaScript</span>
<span class="nx">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">10</span><span class="dl">'</span><span class="p">,</span> <span class="mi">99</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>  
<span class="nx">a</span><span class="p">.</span><span class="nx">sort</span><span class="p">()</span>
<span class="c1">// a = [ 1, '10', 10, 3, 7, 99, 'a' ]</span>
</code></pre></div></div>

<p>If you try to sort list with both str elements and int elements, Python throws an TypeError, yet JavaScript doesn‚Äôt.</p>

<p>For the last, look at this:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// JavaScript</span>
<span class="nx">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
<span class="nx">a</span><span class="p">.</span><span class="nx">sort</span><span class="p">()</span>
<span class="c1">// a = [ 0, 1, 4, 8, 9 ]</span>
</code></pre></div></div>

<p>The array has been sorted in ascending order as expected.</p>

<p>We are engineers so we need to know how the sorting method actually works in JS. Let‚Äôs see through it.</p>

<h3 id="how-js-sort-method-works">How JS Sort Method Works</h3>
<p>JavaScript sort method compares UTF-16 codes of its elements that are converted into string.</p>

<blockquote>
  <p>The default sort order is built upon converting the elements into strings, then comparing their sequences of UTF-16 code units values.
<br /> [Source: Array‚Äã.prototype‚Äã.sort(), MDN]</p>
</blockquote>

<p>If [‚Äò10‚Äô, 10, 1] is the array to sort, JavaScript default sort method will yield [ 1, ‚Äò10‚Äô, 10 ].</p>

<p>‚Äò10‚Äô is regarded equal to number type 10, since JavaScript treats all elements just like a string.</p>

<p>So, it is not surprising even if we got [‚Äò10‚Äô, 2] from [2, ‚Äò10‚Äô] sorted with Array.prototype.sort().</p>

<p>Then, if we want to sort number elements in ascending/descending order, how could we do?</p>

<p>Luckily, JavaScript sort() takes an compareFunction.</p>

<h3 id="comparefunction-parameter">compareFunction Parameter</h3>
<p>There are few ground rules to know about the compareFunction parameter that Array.prototype.sort() takes.</p>

<blockquote>
  <ul>
    <li>f compareFunction(a, b) is less than 0, sort a to an index lower than b (i.e. a comes first).</li>
    <li>If compareFunction(a, b) returns 0, leave a and b unchanged with respect to each other, but sorted with respect to all different elements. Note: the ECMAscript standard does not guarantee this behavior, thus, not all browsers (e.g. Mozilla versions dating back to at least 2003) respect this.</li>
    <li>If compareFunction(a, b) is greater than 0, sort b to an index lower than a (i.e. b comes first).</li>
    <li>compareFunction(a, b) must always return the same value when given a specific pair of elements a and b as its two arguments. If inconsistent results are returned, then the sort order is undefined.
<br />[Source: MDN]</li>
  </ul>
</blockquote>

<p>Therefore, sorting and array with number elements in ascending order could be:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="nx">a</span><span class="p">.</span><span class="nx">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span> <span class="o">-</span> <span class="nx">b</span><span class="p">)</span>
<span class="c1">// a = [ 1, 1, 3, 7, 8, 8, 10, 10 ]</span>
</code></pre></div></div>

<p>If a-b &gt; 0, sort method will treat b to get lower index. Else if a-b &lt; 0, it will treat a to get lower index. Else if a -b === 0, there could be no change at all.</p>

<p>The good thing is, you can manually modify the way sort method works.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Let's imitate Array.prototype.reverse()</span>
<span class="nx">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="nx">a</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="nx">x</span><span class="o">=&gt;</span> <span class="mi">1</span><span class="p">)</span>
<span class="c1">// a = [5, 4, 3, 2, 1]</span>

<span class="c1">// Sort odd numbers, even numbers must be on their places</span>
<span class="kd">function</span> <span class="nx">sortArray</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">odds</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">e</span> <span class="o">=&gt;</span> <span class="nx">e</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">1</span><span class="p">).</span><span class="nx">sort</span><span class="p">((</span><span class="nx">e1</span><span class="p">,</span> <span class="nx">e2</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">e1</span> <span class="o">-</span> <span class="nx">e2</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">array</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">e</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nx">e</span> <span class="o">%</span> <span class="mi">2</span> <span class="p">?</span> <span class="nx">odds</span><span class="p">.</span><span class="nx">shift</span><span class="p">()</span> <span class="p">:</span> <span class="nx">e</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div></div>

<p>You can manipulate as much as your imagination and creativity allows.</p>

<h3 id="compared-with-python-sort-method">Compared with Python Sort Method</h3>
<p>Python has built in sorting functions like sort() and sorted().</p>

<p>list.sort() sorts the list in ascending order. If strings are given in the list, it sorts by Unicode code points.</p>

<p>First, sort() is a method of list class. Compared to sorted() that takes any iterables as first parameters, sort() takes only lists.</p>

<p>list.sort() takes two parameters, key and boolean value for reverse.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="s">'A'</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'C'</span><span class="p">,</span> <span class="s">'D'</span><span class="p">,</span> <span class="s">'e'</span><span class="p">,</span> <span class="s">'f'</span><span class="p">]</span>
<span class="n">a</span><span class="p">.</span><span class="n">sort</span><span class="p">()</span> <span class="c1"># ['A', 'C', 'D', 'b', 'e', 'f']
</span>
<span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="s">'A'</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'C'</span><span class="p">,</span> <span class="s">'D'</span><span class="p">,</span> <span class="s">'e'</span><span class="p">,</span> <span class="s">'f'</span><span class="p">]</span>
<span class="n">a</span><span class="p">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="nb">str</span><span class="p">.</span><span class="n">upper</span><span class="p">)</span> <span class="c1"># ['A', 'b', 'C', 'D', 'e', 'f']
</span></code></pre></div></div>

<p>As you may find out, the value of the key parameter should be a function that takes a single argument and returns a key to use for sorting purposes.</p>

<p>We can also assign order by adding reverse options.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="n">a</span><span class="p">.</span><span class="n">sort</span><span class="p">(</span><span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="c1"># [5, 4, 3, 2, 1]
</span>
<span class="c1"># As you may noticed, both key and reverse params could be omitted
</span></code></pre></div></div>

<p>Python distinguishes elements of the list to be sorted. It doesn‚Äôt compare string to number types(int, float).</p>

<p>You cannot sort [1, ‚Äòa‚Äô, 3, ‚Äò10‚Äô] since ‚Äò&lt;‚Äô is not supported between int and str.</p>

<p>To sum up:</p>

<p><strong>JavaScript</strong></p>
<ul>
  <li>treats elements as a string.</li>
  <li>Sort in ascending order of UTF-16 codes of every elements by default.</li>
  <li>A callback function that returns number can be given to set rules.</li>
</ul>

<p><strong>Python</strong></p>
<ul>
  <li>treats number and string differently.</li>
  <li>String elements are compared by UTF-8(usually default) codes.</li>
  <li>Sort in ascending order by default.</li>
</ul>

:ET