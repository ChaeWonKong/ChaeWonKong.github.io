I"3o<blockquote>
  <h2 id="목차-">목차 <br /></h2>
  <p><strong>1. 타입스크립트(TypeScript)에 대하여</strong> <br />
 <strong>2. 타입스크립트의 타입</strong> <br />
 2.1 number와 string <br />
 2.2 boolean <br />
 2.3 array <br />
 2.4tuple <br />
 2.5 enum <br />
 2.6 any <br />
 <strong>3. 함수와 타입</strong> <br />
 3.1 반환되는 결과에 타입 지정하기 <br />
 3.2 void 타입 <br />
 3.3 매개변수(Parameter)에 타입 지정하기 <br />
 3.4 함수 타입 지정하기 <br />
 <strong>4. 객체와 타입</strong> <br />
 <strong>5. 연습</strong> <br />
<strong>마치며</strong></p>
</blockquote>

<h2 id="1-타입스크립트typescript에-대하여">1. 타입스크립트(TypeScript)에 대하여</h2>
<p>타입스크립트는 자바스크립트의 확장판(Superset)이다. 자바스크립트의 기능을 포함하고, 추가적인 기능을 제공한다.</p>

<p>타입스크립트는 자바스크립트에 비해 보다 강한 Type 관리를 제공한다. 즉, 타입에 대해 엄격하다.</p>

<p>타입스크립트는 자바스크립트랑 다르기 때문에 자바스크립트로 컴파일해야 이용 가능하다.</p>

<h2 id="2-타입스크립트의-타입">2. 타입스크립트의 타입</h2>
<p>타입스크립트의 타입으로는 number, string, boolean, array, tuple, enum, any가 있다.</p>

<h3 id="21-number와-string">2.1 number와 string</h3>
<p>자바스크립트의 Number과 거의 유사하다. 다만 몇가지 차이가 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">num</span> <span class="o">=</span> <span class="mi">13</span><span class="p">;</span>
<span class="nx">num</span> <span class="o">+=</span> <span class="dl">'</span><span class="s1">23</span><span class="dl">'</span><span class="p">;</span>

<span class="c1">// JavaScript &gt;&gt;&gt; '1323'</span>
<span class="c1">// TypeScript &gt;&gt;&gt; Type 'string' is not assignable to type 'number'</span>

<span class="kd">let</span> <span class="nx">anotherNum</span> <span class="o">=</span> <span class="mi">23</span><span class="p">;</span>
<span class="nx">anotherNum</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">abc</span><span class="dl">'</span><span class="p">;</span>
<span class="c1">// Type '"ab"' is not assignable to type 'number'</span>
</code></pre></div></div>

<p>자바스크립트에서는 Number와 String을 서로 더할 수 있었다. 이럴 경우 String이 반환되었다. 타입스크립트에서는 이런 것은 불가능하다.</p>

<p>타입스크립트는 변수를 선언할 때 자동으로 타입을 판단한다. 변수에 number가 할당되면 해당 변수의 타입은 number이다. 변수에 string이 할당되면 해당 변수의 타입은 string이다.</p>

<p>변수이므로 다른 값을 할당할 수는 있다. 다만 해당 타입 이외의 값은 할당이 불가능하다. 즉, string에는 string만을, number에는 number만을 할당해야 한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">num</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
<span class="nx">num</span> <span class="o">=</span> <span class="mi">23</span><span class="p">;</span>
<span class="nx">num</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">23</span><span class="dl">'</span><span class="p">;</span>
<span class="c1">// Type '"ab"' is not assignable to type 'number'</span>

<span class="kd">let</span> <span class="nx">a</span><span class="p">;</span>
<span class="nx">a</span> <span class="o">=</span> <span class="mi">23</span><span class="p">;</span>
<span class="nx">a</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">23</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div>

<p>타입스크립트에서는 명시적으로 변수의 타입을 선언할 수 있다. 위 코드에서처럼 타입을 명시해주면 해당 타입의 값만 할당할 수 있다.</p>

<p>한편 변수를 선언만 하고 값을 할당하지 않는 경우, 타입을 명시적으로 함께 선언하지 않으면 ‘any’라는 타입으로 선언된다.</p>

<p>즉, 어떤 타입의 값이든 할당이 가능하다.</p>

<h3 id="22-boolean">2.2 boolean</h3>
<p>기본적으로 JavaScript의 boolean과 같다. 다만 다음과 같은 차이가 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">isTrue</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
<span class="nx">isTrue</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="c1">// Type '1' is not assignable to type 'boolean'</span>
</code></pre></div></div>

<p>타입스크립트에서 boolean으로 선언된 변수에는 0이나 1을 할당할 수 없다.오직 true와 false만 할당할 수 있다.</p>

<h3 id="23-array">2.3 array</h3>
<p>array의 선언은 조금 특이하다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">a</span><span class="p">:</span> <span class="nx">number</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>

<span class="kd">let</span> <span class="nx">b</span><span class="p">:</span> <span class="nx">string</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">];</span>

<span class="kd">let</span> <span class="nx">c</span><span class="p">:</span> <span class="nx">any</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="dl">'</span><span class="s1">b</span><span class="dl">'</span><span class="p">];</span>
</code></pre></div></div>

<p>배열의 경우 배열 내의 타입 관리는 엄격한 편이다. 
다음을 보자.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">);</span>
<span class="c1">// Argument of type '"a"' is not assignable to parameter of type 'number'</span>

<span class="kd">let</span> <span class="nx">arrAny</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
<span class="nx">arrAny</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">s</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">arrAny</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">33</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arrAny</span><span class="p">);</span>
<span class="c1">// [1, 'a', 3, 's', 33]</span>
</code></pre></div></div>

<p>타입스크립트는 타입을 명시하지 않았을 경우 할당된 값을 통해 해당 변수에 할당된 타입을 확인한다. number로만 이루어진 배열은 number형 배열로 인식되며 여러 타입이 혼합되어 있을 경우엔 any형 배열로 인식된다. 당연히 boolean형, string형 등 여타 타입별로 배열이 다 존재한다.</p>

<h3 id="24tuple">2.4tuple</h3>
<p>파이썬의 튜플과는 약간 다르다. 파이썬의 튜플은 불변성을 특징으로 한다. 배열 내에 값을 추가하거나 삭제할 수 없고 변경할 수도 없다.</p>

<p>타입스크립트의 튜플은 파이썬에 비해서는 덜 엄격한 편이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">address</span><span class="p">:</span> <span class="p">[</span><span class="nx">string</span><span class="p">,</span> <span class="nx">number</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">Baker st.</span><span class="dl">'</span><span class="p">,</span> <span class="mi">32</span><span class="p">]</span>

<span class="nx">address</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">33</span><span class="p">);</span>
<span class="nx">address</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>

<span class="nx">address</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">23</span><span class="p">;</span>
<span class="c1">// Type '23' is not assignable to type 'string'</span>
</code></pre></div></div>

<p>튜플로 선언되었지만 push도 pop도 가능하다. 하지만 명시된 타입만큼은 반드시 지켜져야 한다. 첫번째 요소는 string, 두번째 요소는 number이므로 이 순서와 타입은 반드시 지켜져야 한다.</p>

<h3 id="25-enum">2.5 enum</h3>
<p>enum은 number의 표현력을 강화한 형태이다.</p>

<p>switch 문을 사용하다 보면 string 형태로 각 케이스를 설정하는 것은 타이포 발생으로 인한 오류의 가능성을 높이고, string이 number에 비해 메모리를 더 차지하므로 불리함을 알 수 있다.</p>

<p>enum은 내부적으로는 숫자로 취급되지만 프로그래머는 숫자가 아닌 string으로 볼 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">enum</span> <span class="nx">Color</span> <span class="p">{</span><span class="nx">Gray</span><span class="p">,</span> <span class="nx">Green</span><span class="p">,</span> <span class="nx">Blue</span><span class="p">};</span>
<span class="kd">let</span> <span class="nx">myColor</span> <span class="o">=</span> <span class="nx">Color</span><span class="p">.</span><span class="nx">Green</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myColor</span><span class="p">);</span>
<span class="c1">// 1</span>
</code></pre></div></div>

<p>enum 키워드를 사용하면 내부적으로 array처럼 index가 부여된다. array와의 차이점이 있다면 요소에 그 index가 직접 할당된다는 것이다.</p>

<h3 id="26-any">2.6 any</h3>
<p>마지막으로 any라는 타입이 있다. any는 무엇이든 할당가능하다. 즉 자바스크립트의 일반적인 변수와 같아진다.</p>

<p>따라서 any는 조심해 사용해야 한다. 타입스크립트의 타입과 관련된 수많은 장점들은 any라는 타입을 사용함으로써 전부 사라지게 된다. 자바스크립트와 같아지기 때문이다.</p>

<h2 id="3-함수와-타입">3. 함수와 타입</h2>
<p>위에서 언급한 타입들은 함수에도 지정하거나 사용할 수 있다.</p>

<h3 id="31-반환되는-결과에-타입-지정하기">3.1 반환되는 결과에 타입 지정하기</h3>
<p>함수가 특정 값을 반환한다면 그 반환되는 값의 타입을 함수를 선언하면서 지정할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">myName</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Leon</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">returnString</span><span class="p">(</span><span class="nx">s</span><span class="p">):</span> <span class="nx">string</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">s</span>
<span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">returnString</span><span class="p">(</span><span class="nx">myName</span><span class="p">));</span>
</code></pre></div></div>

<h3 id="32-void-타입">3.2 void 타입</h3>
<p>함수에서는 특별히 반환 값의 타입으로 void를 지정할 수 있다.</p>

<p>void는 값이 없음, 즉 리턴값이 없어야 함을 지정하는 것이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">const</span> <span class="nx">myName</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Leon</span><span class="dl">"</span>

<span class="kd">function</span> <span class="nx">callName</span><span class="p">(</span><span class="nx">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">name</span><span class="p">;</span>
<span class="p">};</span>

<span class="nx">callName</span><span class="p">(</span><span class="nx">myName</span><span class="p">);</span>
<span class="c1">// Type 'string' is not assignable to type 'void'</span>
</code></pre></div></div>

<h3 id="33-매개변수parameter에-타입-지정하기">3.3 매개변수(Parameter)에 타입 지정하기</h3>
<p>타입스크립트에서는 매개변수가 있을 경우 타입을 지정해야 한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">myName</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Leon</span><span class="dl">"</span>

<span class="kd">function</span> <span class="nx">callName</span><span class="p">(</span><span class="nx">name</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">name</span><span class="p">;</span>
<span class="p">};</span>

<span class="nx">callName</span><span class="p">(</span><span class="nx">myName</span><span class="p">);</span>
<span class="c1">// Type 'string' is not assignable to type 'void'</span>
</code></pre></div></div>

<p>타입을 지정하지 않아서 오류가 발생했다. 타입 지정은 다음처럼 하면 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">multiply</span><span class="p">(</span><span class="nx">value1</span><span class="p">:</span> <span class="nx">number</span><span class="p">,</span> <span class="nx">value2</span><span class="p">:</span> <span class="nx">number</span><span class="p">):</span> <span class="nx">number</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">value1</span> <span class="o">*</span> <span class="nx">value2</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="34-함수-타입-지정하기">3.4 함수 타입 지정하기</h3>
<p>타입스크립트에서는 변수에 함수타입을 지정할 수 있다. ES6 화살표함수 문법을 사용하면 된다. 이를 통해 매개변수의 타입과 반환값의 타입을 지정해둘 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">multiply</span><span class="p">(</span><span class="nx">value1</span><span class="p">:</span> <span class="nx">number</span><span class="p">,</span> <span class="nx">value2</span><span class="p">:</span> <span class="nx">number</span><span class="p">):</span> <span class="nx">number</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">value1</span> <span class="o">*</span> <span class="nx">value2</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">myFunc</span><span class="p">:</span> <span class="p">(</span><span class="nx">val1</span><span class="p">:</span> <span class="nx">number</span><span class="p">,</span> <span class="nx">val2</span><span class="p">:</span> <span class="nx">number</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">number</span><span class="p">;</span>

<span class="nx">myFunc</span> <span class="o">=</span> <span class="nx">multiply</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myFunc</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">));</span>
<span class="c1">// 8</span>
</code></pre></div></div>

<h2 id="4-객체와-타입">4. 객체와 타입</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Leon</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">age</span><span class="p">:</span> <span class="mi">27</span>
<span class="p">}</span>

<span class="nx">data</span> <span class="o">=</span> <span class="p">{}</span>
<span class="c1">//Type '{}' is missing the following properties from type '{ name: string; age: number; }': name,age</span>

<span class="nx">data</span> <span class="o">=</span> <span class="p">{</span><span class="na">a</span><span class="p">:</span> <span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">,</span> <span class="na">b</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>
<span class="c1">// Type '{ a: string; b: number; }' is not assignable to type '{ name: string; age: number; }'.</span>
<span class="c1">// Object literal may only specify known properties, and 'a' does not exist in type '{ name: string; age: number; }'</span>
</code></pre></div></div>
<p>객체에서도 타입스크립트는 자바스크립트와 약간 다르다. 타입을 지정하지 않고 data라는 객체를 만들었다. name과 age라는 프로퍼티가 담겨있는데, name에는 string이, age에는 number가 할당되어 있다. 타입스크립트는 이 타입들을 기억한다. 나아가 key값 역시 기억한다. 따라서 다른 키 값을 할당 하는 것은 에러를 발생시키며, value 값의 타입이 달라져도 에러를 발생시킨다.</p>

<h2 id="5-연습">5. 연습</h2>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">bankAccount</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">money</span><span class="p">:</span> <span class="mi">2000</span><span class="p">,</span>
    <span class="nx">deposit</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">money</span> <span class="o">+=</span> <span class="nx">value</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
 
<span class="kd">let</span> <span class="nx">myself</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Max</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">bankAccount</span><span class="p">:</span> <span class="nx">bankAccount</span><span class="p">,</span>
    <span class="na">hobbies</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">Sports</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Cooking</span><span class="dl">"</span><span class="p">]</span>
<span class="p">};</span>
 
<span class="nx">myself</span><span class="p">.</span><span class="nx">bankAccount</span><span class="p">.</span><span class="nx">deposit</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
 
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myself</span><span class="p">);</span>
</code></pre></div></div>
<p>위 코드를 타입스크립트적으로 리팩토링 해보자. 최대한 타입을 활용해야 한다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">bankAccount</span><span class="p">:</span> <span class="p">{</span><span class="nl">money</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="nx">deposit</span><span class="p">:</span> <span class="p">(</span><span class="nx">val</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">}</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">money</span><span class="p">:</span> <span class="mi">2000</span><span class="p">,</span>
  <span class="nx">deposit</span><span class="p">(</span><span class="na">value</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">money</span> <span class="o">+=</span> <span class="nx">value</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>먼저 bankAccount라는 변수를 타입스크립트로 변환해 보았다. 객체의 각 프로퍼티에 대해 타입을 지정했다. deposit 함수의 경우 매개변수는 number 타입을, return값으로는 void 타입을 주었다. return이 없기 때문이다.</p>

<p>다음으로 myself라는 변수를 살펴보자.</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">myself</span><span class="p">:</span> <span class="p">{</span><span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">bankAccount</span><span class="p">:</span> <span class="p">{</span><span class="nl">money</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="nx">deposit</span><span class="p">:</span> <span class="p">(</span><span class="nx">val</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">},</span> <span class="nx">hobbies</span><span class="p">:</span> <span class="kr">string</span><span class="p">[]}</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Max</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">bankAccount</span><span class="p">:</span> <span class="nx">bankAccount</span><span class="p">,</span>
    <span class="na">hobbies</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">Sports</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Cooking</span><span class="dl">"</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div>
<p>조금 지저분하다. 아무래도 bankAccount를 새 타입으로 선언하는 것이 전체적인 코드를 깔끔하고 정돈되게 만들 것 같다.</p>

<p>전체 코드를 다음과 같이 바꾼다.</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">bankAccount</span> <span class="o">=</span> <span class="p">{</span><span class="na">money</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="na">deposit</span><span class="p">:</span> <span class="p">(</span><span class="na">val</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">}</span>
<span class="kd">let</span> <span class="nx">bankAccount</span><span class="p">:</span> <span class="nx">bankAccount</span><span class="o">=</span> <span class="p">{</span>
    <span class="na">money</span><span class="p">:</span> <span class="mi">2000</span><span class="p">,</span>
    <span class="nx">deposit</span><span class="p">(</span><span class="na">value</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">money</span> <span class="o">+=</span> <span class="nx">value</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">myself</span><span class="p">:</span> <span class="p">{</span><span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">bankAccount</span><span class="p">:</span> <span class="nx">bankAccount</span><span class="p">,</span> <span class="nx">hobbies</span><span class="p">:</span> <span class="kr">string</span><span class="p">[]}</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Max</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">bankAccount</span><span class="p">:</span> <span class="nx">bankAccount</span><span class="p">,</span>
    <span class="na">hobbies</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">Sports</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Cooking</span><span class="dl">"</span><span class="p">]</span>
<span class="p">}</span>

<span class="nx">myself</span><span class="p">.</span><span class="nx">bankAccount</span><span class="p">.</span><span class="nx">deposit</span><span class="p">(</span><span class="mi">3000</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myself</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="마치며">마치며</h2>
<p>타입스크립트는 강한 타입을 제공한다. 이를 통해 좀 더 탄탄하고 안정적인 개발을 가능하게 한다. 자바스크립트와 타입스크립트는 유사하다. 따라서 배우기 어렵지 않다. 다만, 타입과 관련해서는 약간의 규칙이 추가되는 정도다.</p>

<p>배우기 쉬우면서도 자바스크립트의 단점들을 개선한 타입스크립트. 과연 주목받을만 하다.</p>

:ET